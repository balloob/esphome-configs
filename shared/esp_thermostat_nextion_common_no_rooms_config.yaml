esphome:
  includes: shared/esp_thermostat_nextion.h
  platform: ESP32
  board: esp-wrover-kit
  platformio_options:
    build_flags: -DBOARD_HAS_PSRAM -mfix-esp32-psram-cache-issue -DUSING_BSEC --param=max-vartrack-size=80000000
    monitor_speed: 115200
    upload_speed: 460800
  # on_boot:
  #   then:
  #     - delay: 3s
  #     - lambda: |-
  #         main_lcd->goto_page("main");
  #         esp32_thermostat::draw_main_screen(true);

api:
  services:
    # - service: set_display_page
    #   variables:
    #     page: int
    #   then:
    #     - lambda: 'esp32_thermostat::set_display_page(page);'
    - service: update_nextion
      then:
        - lambda: 'main_lcd->upload_tft();'
    - service: update_climate_current_temperature
      variables:
        temperature: float
      then:
        - globals.set:
            id: current_temperature
            value: !lambda 'return temperature;'
        - globals.set:
            id: missed_update_count
            value: '0'
        - lambda: 'esp32_thermostat::update_climate_current_temperature(temperature);'
    - service: update_climate_current_humidity
      variables:
        humidity: float
      then:
        - globals.set:
            id: current_humidity
            value: !lambda 'return humidity;'
        - globals.set:
            id: missed_update_count
            value: '0'
        - lambda: 'esp32_thermostat::update_climate_current_humidity(humidity);'
    - service: update_climate_table_name
      variables:
        row: int
        name: string
      then:
        - lambda: 'esp32_thermostat::update_climate_table_name(row, name);'
    - service: update_climate_table_humidity
      variables:
        row: int
        humidity: float
      then:
        - lambda: 'esp32_thermostat::update_climate_table_humidity(row, humidity);'
    - service: update_climate_table_temperature
      variables:
        row: int
        temperature: float
      then:
        - lambda: 'esp32_thermostat::update_climate_table_temperature(row, temperature);'
    - service: update_status
      variables:
        message: string
      then:
        - globals.set:
            id: status_string
            value: !lambda 'return message;'
        - lambda: 'esp32_thermostat::update_status();'

globals:
  # the temperature/humidity that guides the thermostat controller
  - id: current_humidity
    type: float
    restore_value: yes
    initial_value: '0'
  - id: current_temperature
    type: float
    restore_value: yes
    initial_value: '-100'
  # display brightness (as calculated by ADC/phototransistor)
  - id: display_brightness
    type: float
    restore_value: no
    initial_value: '50'
  # last hour display was fully refreshed
  - id: display_last_full_refresh
    type: int
    restore_value: no
    initial_value: '-1'
  # number of sensor updates while offline
  - id: missed_update_count
    type: int
    restore_value: no
    initial_value: '0'
  # row on which local sensor data is placed in the climate data table
  - id: climate_table_local_row
    type: int
    restore_value: no
    initial_value: '-1'
  # status string
  - id: status_string
    type: std::string
    restore_value: no
    initial_value: '""'
  # flag to indicate on-board sensor is in use
  - id: on_board_sensor_active
    type: bool
    restore_value: no
    initial_value: 'true'
  # flag to indicate template sensor is ready
  - id: sensor_ready
    type: bool
    restore_value: no
    initial_value: 'false'

script:
  # display screen management
  - id: button_press
    mode: restart
    then:
      - script.execute: display_on
      - delay: 120s
      - lambda: |-
          if (id(currentPage).state != ${home_page_number}){
            main_lcd->goto_page("main");
          }
      # - lambda: 'esp32_thermostat::set_display_page(esp32_thermostat::DisplayPageEnum::MAIN_SCREEN);'
  # display power management
  - id: display_on
    mode: single
    then:
      - lambda: |-
          ESP_LOGD("display_on","display_on is_sleeping %s", TRUEFALSE( id(main_lcd)->is_sleeping() ) );
          if (id(main_lcd)->is_sleeping()){
            id(main_lcd)->sleep(false);
            display_page_refresh->execute();
          }
      #- script.execute: display_page_refresh
      #- lambda: 'id(main_lcd)->set_backlight_brightness(100);'
      #- component.update: main_lcd
      # - delay: 120s
      # - lambda: 'id(main_lcd)->turn_off();'
      # - lambda: 'id(display_brightness) = 0;'
  # display refresh - everything on current page
  - id: display_page_refresh
    mode: single
    then:
      - lambda: |-
          ESP_LOGD("no_rooms","display_page_refresh start %f", id(currentPage).state);
          if (id(currentPage).state == ${home_page_number})
            id(main_lcd).update_components_by_prefix("${home_page_name}");
          //else if (id(currentPage).state == ${setpoints_page_number})
          //  id(main_lcd).update_components_by_prefix("${setpoints_page_name}");
          else if (id(currentPage).state == ${sensors_page_number})
            id(main_lcd).update_components_by_prefix("${sensors_page_name}");
          else if (id(currentPage).state == ${weather_page_number})
            id(main_lcd).update_components_by_prefix("${weather_page_name}");
  # display refresh coordination
  - id: climate_action_refresh
    mode: restart
    then:
      - delay: 1s
      - script.execute: display_refresh_action

status_led:
  pin:
    number: GPIO5
    inverted: true

time:
  - platform: homeassistant
    id: esptime
    timezone: ${time_zone}

i2c:
  id: i2c_bus
  frequency: 200kHz
  sda: 21
  scl: 22
  scan: True

uart:
  id: nextion_uart
  tx_pin: GPIO19
  rx_pin: GPIO18
  baud_rate: 115200

climate:
  - platform: thermostat
    id: esp_thermostat
    name: ${node_friendly_name}
    sensor: esp_thermostat_temperature_sensor
    hysteresis: 0.555555555555556
    visual:
      min_temperature: 60°F
      max_temperature: 90°F
      temperature_step: 1
    default_target_temperature_low: 72°F
    default_target_temperature_high: 75°F
    away_config:
      default_target_temperature_low: 68°F
      default_target_temperature_high: 78°F
    off_mode:
      - switch.turn_off: esp_thermostat_heat_1
      - switch.turn_off: esp_thermostat_cool_1
      - switch.turn_off: esp_thermostat_fan
      - lambda: |-
          id(esp_thermostat).fan_mode = climate::CLIMATE_FAN_AUTO;
          ESP_LOGD("TEST","Mode changed off_mode");
      - script.execute: display_refresh_mode
    auto_mode:
      - lambda: |-
          ESP_LOGD("TEST","Mode changed auto_mode");
      - script.execute: display_refresh_mode
    cool_mode:
      - lambda: |-
          ESP_LOGD("TEST","Mode changed cool_mode");
      - script.execute: display_refresh_mode
    heat_mode:
      - lambda: |-
          ESP_LOGD("TEST","Mode changed heat_mode");
      - script.execute: display_refresh_mode
    fan_only_mode:
      - lambda: |-
          ESP_LOGD("TEST","Mode changed fan_only_mode");
      - script.execute: display_refresh_mode
    cool_action:
      - switch.turn_off: esp_thermostat_heat_1
      - switch.turn_on: esp_thermostat_fan
      - lambda: |-
          if (id(esp_thermostat_temperature_sensor).state - id(esp_thermostat).target_temperature_high < esp32_thermostat::second_stage_activation_delta)
            id(esp_thermostat_cool_1).turn_on();
          else
            id(esp_thermostat_cool_2).turn_on();
      - script.execute: climate_action_refresh
    heat_action:
      - switch.turn_off: esp_thermostat_cool_1
      - lambda: |-
          if (id(esp_thermostat).target_temperature_low - id(esp_thermostat_temperature_sensor).state < esp32_thermostat::second_stage_activation_delta)
            id(esp_thermostat_heat_1).turn_on();
          else
            id(esp_thermostat_heat_2).turn_on();
      - script.execute: climate_action_refresh
    idle_action:
      - switch.turn_off: esp_thermostat_cool_1
      - switch.turn_off: esp_thermostat_heat_1
      - lambda: |-
          if (id(esp_thermostat).fan_mode == climate::CLIMATE_FAN_AUTO)
            id(esp_thermostat_fan).turn_off();
      - script.execute: climate_action_refresh
    fan_only_action:
      - switch.turn_on: esp_thermostat_fan
      - switch.turn_off: esp_thermostat_cool_1
      - switch.turn_off: esp_thermostat_heat_1
      - script.execute: climate_action_refresh
    fan_mode_auto_action:
      - switch.turn_off: esp_thermostat_fan
      # - lambda: |-
      #     if (!id(esp_thermostat_cool_1).state)
      #       id(esp_thermostat_fan).turn_off();
      - script.execute: display_refresh_fan_mode
      - script.execute: climate_action_refresh
    fan_mode_on_action:
      - switch.turn_on: esp_thermostat_fan
      - script.execute: display_refresh_fan_mode
      - script.execute: climate_action_refresh

binary_sensor:
  - platform: status
    id: esp_thermostat_api_status
    name: ${node_friendly_name} API Status
    on_state:
      then:
        - lambda: 'esp32_thermostat::update_status();'
  # - platform: gpio
  #   id: esp_thermostat_tmp117_alert
  #   name: ${node_friendly_name} TMP117 Alert
  #   pin:
  #     mcp23017: mcp23017_hub
  #     number: 15
  #     mode: INPUT_PULLUP
  # - platform: gpio
  #   id: esp_thermostat_mcp23017_int_a
  #   name: ${node_friendly_name} MCP23017 Interrupt A
  #   pin:
  #     number: GPIO36
  # - platform: gpio
  #   id: esp_thermostat_mcp23017_int_b
  #   name: ${node_friendly_name} MCP23017 Interrupt B
  #   pin:
  #     number: GPIO39
  - platform: gpio
    id: esp_thermostat_motion_detection
    name: ${node_friendly_name} Motion Detection
    pin:
      number: GPIO27
    on_state:
      then:
        - if:
            condition:
              switch.is_on: esp_thermostat_display_on_motion
            then:
              - script.execute: display_on
  - platform: gpio
    id: esp_thermostat_mode_button
    name: ${node_friendly_name} Mode Button
    pin:
      number: GPIO0
      inverted: true
    on_click:
      min_length: 50ms
      max_length: 500ms
      then:
        - lambda: 'esp32_thermostat::mode_button_click();'
        - component.update: main_lcd
        - script.execute: button_press
  - platform: nextion
    id: nextion_touch_mode_off
    page_id: ${setpoints_page_number}
    component_id: ${btnModeOff}
    component_name: ${setpoints_page_name}.btnModeOff
    on_press:
      then:
        - lambda: |-
            id(esp_thermostat).mode = CLIMATE_MODE_OFF;
            id(esp_thermostat).fan_mode = CLIMATE_FAN_AUTO;
            id(esp_thermostat).refresh();
        - script.execute: display_refresh_mode
        - script.execute: display_refresh_fan_mode
        - script.execute: button_press
  - platform: nextion
    id: nextion_touch_mode_fan
    page_id: ${setpoints_page_number}
    component_id: ${btnModeFan}
    component_name: ${setpoints_page_name}.btnModeFan
    on_press:
      then:
        - lambda: |-
            id(esp_thermostat).mode = CLIMATE_MODE_FAN_ONLY;
            id(esp_thermostat).refresh();
        - script.execute: display_refresh_mode
        - script.execute: button_press
  - platform: nextion
    id: nextion_touch_mode_heat
    page_id: ${setpoints_page_number}
    component_id: ${btnModeHeat}
    component_name: ${setpoints_page_name}.btnModeHeat
    on_press:
      then:
        - lambda: |-
            if (id(esp_thermostat).mode == CLIMATE_MODE_COOL)
              id(esp_thermostat).mode = CLIMATE_MODE_AUTO;
            else if (id(esp_thermostat).mode == CLIMATE_MODE_AUTO)
              id(esp_thermostat).mode = CLIMATE_MODE_COOL;
            else
              id(esp_thermostat).mode = CLIMATE_MODE_HEAT;
            id(esp_thermostat).refresh();
        - script.execute: display_refresh_mode
        - script.execute: button_press
  - platform: nextion
    id: nextion_touch_mode_cool
    page_id: ${setpoints_page_number}
    component_id: ${btnModeCool}
    component_name: ${setpoints_page_name}.btnModeCool
    on_press:
      then:
        - lambda: |-
            if (id(esp_thermostat).mode == CLIMATE_MODE_HEAT)
              id(esp_thermostat).mode = CLIMATE_MODE_AUTO;
            else if (id(esp_thermostat).mode == CLIMATE_MODE_AUTO)
              id(esp_thermostat).mode = CLIMATE_MODE_HEAT;
            else
              id(esp_thermostat).mode = CLIMATE_MODE_COOL;
            id(esp_thermostat).refresh();
        - script.execute: display_refresh_mode
        - script.execute: button_press
  - platform: nextion
    id: nextion_touch_down_cool
    page_id: ${setpoints_page_number}
    component_id: ${touch_down_cool}
    component_name: ${setpoints_page_name}.btnDownCool
    on_press:
      then:
        - lambda: |-
            ESP_LOGD("nextion_touch_down_cool","temp_step_size %lf",esp32_thermostat::temp_step_size);
            esp32_thermostat::adjust_high_set_point(-esp32_thermostat::temp_step_size);

        - script.execute: button_press
  - platform: nextion
    id: nextion_touch_up_cool
    page_id: ${setpoints_page_number}
    component_id: ${touch_up_cool}
    component_name: ${setpoints_page_name}.btnUpCool
    on_press:
      then:
        - lambda: 'esp32_thermostat::adjust_high_set_point(esp32_thermostat::temp_step_size);'
        - script.execute: button_press
  - platform: nextion
    id: nextion_touch_down_heat
    page_id: ${setpoints_page_number}
    component_id: ${touch_down_heat}
    component_name: ${setpoints_page_name}.btnDownHeat
    on_press:
      then:
        - lambda: 'esp32_thermostat::adjust_low_set_point(-esp32_thermostat::temp_step_size);'
        - script.execute: button_press
  - platform: nextion
    id: nextion_touch_up_heat
    page_id: ${setpoints_page_number}
    component_id: ${touch_up_heat}
    component_name: ${setpoints_page_name}.btnUpHeat
    on_press:
      then:
        - lambda: 'esp32_thermostat::adjust_low_set_point(esp32_thermostat::temp_step_size);'
        - script.execute: button_press
  - platform: nextion
    id: nextion_touch_down_hum
    page_id: ${setpoints_page_number}
    component_id: ${touch_down_hum}
    component_name: ${setpoints_page_name}.btnDownHum
    on_press:
      then:
        # - lambda: 'esp32_thermostat::adjust_humidity_set_point(-esp32_thermostat::temp_step_size);'
        - script.execute: button_press
  - platform: nextion
    id: nextion_touch_up_hum
    page_id: ${setpoints_page_number}
    component_id: ${touch_up_hum}
    component_name: ${setpoints_page_name}.btnUpHum
    on_press:
      then:
        # - lambda: 'esp32_thermostat::adjust_humidity_set_point(esp32_thermostat::temp_step_size);'
        - script.execute: button_press

sensor:
  # Nextion page sensor
  - platform: nextion
    nextion_id: main_lcd
    id: currentPage
    variable_name: currentPage
    on_value:
      then:
        - script.execute: display_page_refresh
        - script.execute: update_loop
        - script.execute: button_press
  # template sensor used for thermostat component
  - platform: template
    id: esp_thermostat_temperature_sensor
    name: ${node_friendly_name} Template Temperature Sensor
    unit_of_measurement: '°C'
    lambda: 'return esp32_thermostat::thermostat_sensor_update();'
    update_interval: 15s
    on_value:
      then:
        - lambda: 'esp32_thermostat::update_climate_current_temperature(id(esp_thermostat_temperature_sensor).state);'
  # template sensor used for humidity
  - platform: template
    id: esp_thermostat_humidity_sensor
    name: ${node_friendly_name} Template Humidity Sensor
    unit_of_measurement: '%'
    lambda: 'return id(esp_thermostat_shtcx_humidity).state;'
    update_interval: 15s
    on_value:
      then:
        - lambda: 'esp32_thermostat::update_climate_current_humidity(id(esp_thermostat_humidity_sensor).state);'
  - platform: nextion
    id: mode
    variable_name: mode
text_sensor:
  - platform: nextion
    nextion_id: main_lcd
    id: textStatus
    component_name: ${home_page_name}.textStatus
  - platform: nextion
    nextion_id: main_lcd
    id: tempCurrent
    component_name: ${home_page_name}.tempCurrent
  - platform: nextion
    nextion_id: main_lcd
    id: textTempCool
    component_name: ${setpoints_page_name}.textTempCool
  - platform: nextion
    nextion_id: main_lcd
    id: textTempHeat
    component_name: ${setpoints_page_name}.textTempHeat
  # - platform: nextion
  #   nextion_id: main_lcd
  #   id: textHumSet
  #   component_name: ${setpoints_page_name}.textHumSet
  - platform: nextion
    nextion_id: main_lcd
    id: humCurrent
    component_name: ${home_page_name}.humCurrent
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor1
    component_name: ${sensors_page_name}.textSensor1
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor2
    component_name: ${sensors_page_name}.textSensor2
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor3
    component_name: ${sensors_page_name}.textSensor3
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor4
    component_name: ${sensors_page_name}.textSensor4
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor5
    component_name: ${sensors_page_name}.textSensor5
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor6
    component_name: ${sensors_page_name}.textSensor6
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor7
    component_name: ${sensors_page_name}.textSensor7
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor8
    component_name: ${sensors_page_name}.textSensor8
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor1a
    component_name: ${sensors_page_name}.textSensor1a
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor2a
    component_name: ${sensors_page_name}.textSensor2a
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor3a
    component_name: ${sensors_page_name}.textSensor3a
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor4a
    component_name: ${sensors_page_name}.textSensor4a
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor5a
    component_name: ${sensors_page_name}.textSensor5a
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor6a
    component_name: ${sensors_page_name}.textSensor6a
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor7a
    component_name: ${sensors_page_name}.textSensor7a
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor8a
    component_name: ${sensors_page_name}.textSensor8a
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor1b
    component_name: ${sensors_page_name}.textSensor1b
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor2b
    component_name: ${sensors_page_name}.textSensor2b
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor3b
    component_name: ${sensors_page_name}.textSensor3b
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor4b
    component_name: ${sensors_page_name}.textSensor4b
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor5b
    component_name: ${sensors_page_name}.textSensor5b
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor6b
    component_name: ${sensors_page_name}.textSensor6b
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor7b
    component_name: ${sensors_page_name}.textSensor7b
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor8b
    component_name: ${sensors_page_name}.textSensor8b
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor1c
    component_name: ${sensors_page_name}.textSensor1c
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor2c
    component_name: ${sensors_page_name}.textSensor2c
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor3c
    component_name: ${sensors_page_name}.textSensor3c
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor4c
    component_name: ${sensors_page_name}.textSensor4c
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor5c
    component_name: ${sensors_page_name}.textSensor5c
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor6c
    component_name: ${sensors_page_name}.textSensor6c
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor7c
    component_name: ${sensors_page_name}.textSensor7c
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor8c
    component_name: ${sensors_page_name}.textSensor8c
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor1d
    component_name: ${sensors_page_name}.textSensor1d
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor1e
    component_name: ${sensors_page_name}.textSensor1e
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor2d
    component_name: ${sensors_page_name}.textSensor2d
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor3d
    component_name: ${sensors_page_name}.textSensor3d
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor4d
    component_name: ${sensors_page_name}.textSensor4d
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor5d
    component_name: ${sensors_page_name}.textSensor5d
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor6d
    component_name: ${sensors_page_name}.textSensor6d
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor7d
    component_name: ${sensors_page_name}.textSensor7d
  - platform: nextion
    nextion_id: main_lcd
    id: textSensor8d
    component_name: ${sensors_page_name}.textSensor8d
  - platform: nextion
    nextion_id: main_lcd
    id: textIAQ
    component_name: ${home_page_name}.textIAQ

switch:
  - platform: nextion
    id: func_changemode
    component_name: func.changemode
  - platform: nextion
    id: nextion_touch_fan_mode_on
    component_name: ${setpoints_page_name}.swFanMode
    on_turn_on:
      - lambda: |-
            id(esp_thermostat).fan_mode = CLIMATE_FAN_ON;
            id(esp_thermostat).refresh();
      - script.execute: display_refresh_fan_mode
      - script.execute: button_press
    on_turn_off:
      - lambda: |-
            id(esp_thermostat).fan_mode = CLIMATE_FAN_AUTO;
            id(esp_thermostat).refresh();
      - script.execute: display_refresh_fan_mode
      - script.execute: button_press
  - platform: template
    id: kbx81_favorite_switch
    name: ${node_friendly_name} Upgrade TFT
    turn_on_action:
      - lambda: |-
          id(main_lcd)->upload_tft();
  - platform: restart
    name: ${node_friendly_name} Restart

  # display power
  - platform: gpio
    id: esp_thermostat_display_power
    name: ${node_friendly_name} Display Power
    restore_mode: ALWAYS_ON
    pin:
      number: 25
      mode: OUTPUT
  # display control
  - platform: template
    id: esp_thermostat_display
    name: ${node_friendly_name} Display
    turn_on_action:
      - script.execute: display_on
    turn_off_action:
      # - lambda: 'id(main_lcd)->turn_off();'
      - lambda: 'id(display_brightness) = 0;'
    # lambda: 'return id(main_lcd)->is_on();'
    lambda: 'return id(display_brightness) > 0;'
  # display control by motion
  - platform: template
    id: esp_thermostat_display_on_motion
    name: ${node_friendly_name} Display On Motion
    optimistic: true
    restore_state: true
    assumed_state: true

color:
  - id: color_control_enabled
    red_int: 0
    green_int: 0
    blue_int: 255
  - id: color_control_disabled
    red: 70%
    green: 70%
    blue: 70%
