

script:
  - id: display_refresh_action
    then:
      - lambda: |-
          // const char *action_string_color = color_lowlight;
          // Color action_string_color = color_control_disabled;
          // std::string action_string = "";
          uint8_t action_background_pic = ${main_background_off_pic};

          switch (id(esp_thermostat).action) {
          case CLIMATE_ACTION_OFF:
            // action_string_color = color_lowlight;
            // action_string = "Off";
            break;
          case CLIMATE_ACTION_IDLE:
            // action_string_color = color_lowlight;
            // action_string = "Idle";
            break;
          case CLIMATE_ACTION_COOLING:
            // action_string_color = color_highlight;
            // action_string_color = color_control_enabled;
            // if (id(esp_thermostat_cool_2).state == true) {
            //   action_string = "Cooling x 2";
            // } else {
            //   action_string = "Cooling";
            // }
            action_background_pic = ${main_background_cool_pic};
            break;
          case CLIMATE_ACTION_HEATING:
            // action_string_color = color_highlight;
            // action_string_color = color_control_enabled;
            // if (id(esp_thermostat_heat_2).state == true) {
            //   action_string = "Heating x 2";
            // } else {
             //  action_string = "Heating";
            // }
            action_background_pic = ${main_background_heat_pic};
            break;
          case CLIMATE_ACTION_DRYING:
            // action_string_color = color_highlight;
            // action_string_color = color_control_enabled;
            // action_string = "Drying";
            break;
          case CLIMATE_ACTION_FAN:
            // action_string_color = color_highlight;
            // action_string_color = color_control_enabled;
            // action_string = "Fanning";
            action_background_pic = ${main_background_fan_pic};
            break;
          }
          // main_lcd->set_component_font_color("textAction", action_string_color);
          //id(textAction).set_state(action_string, false, true);
          //id(textAction).set_foreground_color(action_string_color);
          id(main_lcd).set_component_pic("main", action_background_pic);
  - id: display_refresh_fan_mode
    then:
      - lambda: |-
          int btnModeFan_Pic = ${btnModeFan_Pic_Off};

          switch (id(esp_thermostat).fan_mode) {
          case CLIMATE_FAN_ON:
            btnModeFan_Pic = ${btnModeFan_Pic_On};
            // btnFanModeOn_color = color_highlight;
            break;
          case CLIMATE_FAN_OFF:
            // btnFanModeOff_color = color_highlight;
            break;
          case CLIMATE_FAN_AUTO:
            btnModeFan_Pic = ${btnModeFan_Pic_Auto};
            // btnFanModeAuto_color = color_highlight;
            break;
          case CLIMATE_FAN_LOW:
            // btnFanModeLow_color = color_highlight;
            break;
          case CLIMATE_FAN_MEDIUM:
            // btnFanModeMedium_color = color_highlight;
            break;
          case CLIMATE_FAN_HIGH:
            // btnFanModeHigh_color = color_highlight;
            break;
          case CLIMATE_FAN_MIDDLE:
            // btnFanModeMiddle_color = color_highlight;
            break;
          case CLIMATE_FAN_FOCUS:
            // btnFanModeFocus_color = color_highlight;
            break;
          case CLIMATE_FAN_DIFFUSE:
            // btnFanModeDiffuse_color = color_highlight;
            break;
          }

          id(main_lcd).set_component_pic(
              id(nextion_touch_mode_fan).get_variable_name().c_str(), btnModeFan_Pic);
  - id: display_refresh_mode
    then:
      lambda: |-
        Color btnControlCool_color = id(color_control_disabled), btnControlHeat_color = id(color_control_disabled),
              btnControlHum_color = id(color_control_disabled);

        int btnModeHeat_Pic = ${btnModeHeat_Pic_Off};
        int btnModeCool_Pic = ${btnModeCool_Pic_Off};
        int btnModeFan_Pic = ${btnModeFan_Pic_Off};

        esp32_thermostat::update_temp_text();

        switch (id(esp_thermostat).mode) {
          case CLIMATE_MODE_OFF:
            btnControlHum_color = id(color_control_disabled);
            break;

          case CLIMATE_MODE_AUTO:
            btnControlCool_color = id(color_control_enabled);
            btnControlHeat_color = id(color_control_enabled);
            btnModeCool_Pic =  ${btnModeCool_Pic_On};
            btnModeHeat_Pic =  ${btnModeHeat_Pic_On};
            break;

          case CLIMATE_MODE_COOL:
            btnControlCool_color = id(color_control_enabled);
            btnModeCool_Pic =  ${btnModeCool_Pic_On};
            break;

          case CLIMATE_MODE_HEAT:
            btnControlHeat_color = id(color_control_enabled);
            btnModeHeat_Pic =  ${btnModeHeat_Pic_On};
            break;

          case CLIMATE_MODE_FAN_ONLY:
            btnControlCool_color = id(color_control_enabled);
            btnModeFan_Pic = ${btnModeFan_Pic_On};
            break;

          case CLIMATE_MODE_DRY:
            break;
        }

        id(nextion_touch_down_cool).set_foreground_color(btnControlCool_color);
        id(nextion_touch_up_cool).set_foreground_color(btnControlCool_color);
        id(textTempCool).set_foreground_color(btnControlCool_color);

        id(main_lcd).set_component_pic(id(nextion_touch_mode_cool).get_variable_name().c_str(), btnModeCool_Pic);
        id(main_lcd).set_component_pic(id(nextion_touch_mode_heat).get_variable_name().c_str(), btnModeHeat_Pic);
        id(main_lcd).set_component_pic(id(nextion_touch_mode_fan).get_variable_name().c_str(), btnModeFan_Pic);

        id(nextion_touch_down_heat).set_foreground_color(btnControlHeat_color);
        id(nextion_touch_up_heat).set_foreground_color(btnControlHeat_color);
        id(textTempHeat).set_foreground_color(btnControlHeat_color);

        // humidity controls
        id(nextion_touch_down_hum).set_foreground_color(btnControlHum_color);
        id(nextion_touch_up_hum).set_foreground_color(btnControlHum_color);
        //id(textHumSet).set_foreground_color(btnControlHum_color);
