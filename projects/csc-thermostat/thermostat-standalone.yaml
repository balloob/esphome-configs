substitutions:
  node_name: esp-thermostat
  node_friendly_name: "Thermostat"
  home_page_name: "weather"
  rooms_page_name: "rooms"
  sensors_page_name: "sensors"
  weather_page_name: "weather"

esphome:
  friendly_name: ${node_friendly_name}
  name: ${node_name}
  # build_path: ../../build/${node_name}
  includes: esp_thermostat_nextion.h
  platformio_options:
    build_flags:
      - -DBOARD_HAS_PSRAM
      - -mfix-esp32-psram-cache-issue

esp32:
  board: esp32dev
  framework:
    type: arduino

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # power_save_mode: none
  reboot_timeout: 120min
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${node_name}
    password: !secret ap_password

# captive_portal:

improv_serial:

# Enable logging
logger:

# Enable Home Assistant API and define services
api:
  # encryption:
  #   key: !secret api_key
  reboot_timeout: 120min
  services:
    - service: update_nextion
      then:
        - lambda: "main_lcd->upload_tft();"
    - service: update_status
      variables:
        message: string
      then:
        - globals.set:
            id: status_string
            value: !lambda "return message;"
        - lambda: "esp32_thermostat::display_refresh_status();"

ota:
  password: !secret ota_password

button:
  - platform: restart
    name: Restart

globals:
  # last hour display was fully refreshed
  - id: display_last_full_refresh
    type: int
    restore_value: no
    initial_value: "-1"
  # status string
  - id: status_string
    type: std::string
    restore_value: no
    initial_value: '""'
  # weather condition, temperature, humidity
  - id: weather_air_quality
    type: float
    restore_value: yes
    initial_value: "0"
  - id: weather_condition
    type: std::string
    restore_value: no
    initial_value: '""'
  - id: weather_humidity
    type: float
    restore_value: yes
    initial_value: "0"
  - id: weather_temperature
    type: float
    restore_value: yes
    initial_value: "-100"
  - id: weather_temperature_high
    type: float
    restore_value: no
    initial_value: "-100"
  - id: weather_temperature_low
    type: float
    restore_value: no
    initial_value: "-100"

script:
  # display power management
  - id: motion_sense
    mode: restart
    then:
      - lambda: "id(nextionIdleTimer).set_state(0, true, true);"
  # display refresh coordination
  - id: climate_action_refresh
    mode: restart
    then:
      - delay: 1s
      - lambda: "esp32_thermostat::display_refresh_action();"

status_led:
  pin:
    number: GPIO5
    inverted: true

time:
  - platform: homeassistant
    id: esptime
    timezone: CST+6CDT,M3.2.0/2,M11.1.0/2

i2c:
  id: i2c_bus
  frequency: 400kHz
  sda: 21
  scl: 22
  scan: false

# spi:
#   clk_pin: GPIO14
#   mosi_pin: GPIO13
#   miso_pin: GPIO12

uart:
  id: nextion_uart
  tx_pin: GPIO19
  rx_pin: GPIO18
  baud_rate: 921600

mcp23017:
  - id: mcp23017_hub
    address: 0x20

# BME680 BSEC sensor
bme680_bsec:
  address: 0x77

climate:
  - platform: thermostat
    id: esp_thermostat
    name: none
    sensor: esp_thermostat_temperature_sensor
    startup_delay: true
    supplemental_cooling_delta: 2.222222222222222
    cool_deadband: 0.5556
    cool_overrun: 0.5556
    min_cooling_off_time: 300s
    min_cooling_run_time: 300s
    max_cooling_run_time: 1800s
    supplemental_heating_delta: 2.222222222222222
    heat_deadband: 0.5556
    heat_overrun: 0.5556
    min_heating_off_time: 300s
    min_heating_run_time: 300s
    max_heating_run_time: 1800s
    min_fan_mode_switching_time: 30s
    # min_fanning_off_time: 30s
    # min_fanning_run_time: 30s
    min_idle_time: 30s
    set_point_minimum_differential: 0.5556
    fan_only_action_uses_fan_mode_timer: true
    fan_only_cooling: true
    fan_with_cooling: true
    # fan_with_heating: true
    visual:
      min_temperature: 60°F
      max_temperature: 90°F
      temperature_step: 0.1
    on_boot_restore_from: memory
    default_preset: home
    preset:
      - name: "away"
        default_target_temperature_low: 68°F
        default_target_temperature_high: 78°F
      - name: "boost"
        default_target_temperature_low: 74°F
        default_target_temperature_high: 76°F
      - name: "comfort"
        default_target_temperature_low: 70°F
        default_target_temperature_high: 72°F
      - name: "eco"
        default_target_temperature_low: 72°F
        default_target_temperature_high: 76°F
      - name: "home"
        default_target_temperature_low: 73°F
        default_target_temperature_high: 75°F
    off_mode:
      - lambda: |-
          id(esp_thermostat).fan_mode = climate::CLIMATE_FAN_AUTO;
          esp32_thermostat::display_refresh_mode();
          esp32_thermostat::display_refresh_fan_mode();
    auto_mode:
      - lambda: |-
          esp32_thermostat::display_refresh_mode();
    cool_mode:
      - lambda: |-
          esp32_thermostat::display_refresh_mode();
    heat_mode:
      - lambda: |-
          esp32_thermostat::display_refresh_mode();
    fan_only_mode:
      - lambda: |-
          esp32_thermostat::display_refresh_mode();
    cool_action:
      - switch.turn_off: esp_thermostat_heat_2
      - switch.turn_off: esp_thermostat_heat_1
      - switch.turn_on: esp_thermostat_cool_1
      - script.execute: climate_action_refresh
    supplemental_cooling_action:
      - switch.turn_on: esp_thermostat_cool_2
      - script.execute: climate_action_refresh
    heat_action:
      - switch.turn_off: esp_thermostat_cool_2
      - switch.turn_off: esp_thermostat_cool_1
      - switch.turn_on: esp_thermostat_heat_1
      - script.execute: climate_action_refresh
    supplemental_heating_action:
      - switch.turn_on: esp_thermostat_heat_2
      - script.execute: climate_action_refresh
    idle_action:
      - switch.turn_off: esp_thermostat_cool_2
      - switch.turn_off: esp_thermostat_cool_1
      - switch.turn_off: esp_thermostat_heat_2
      - switch.turn_off: esp_thermostat_heat_1
      - switch.turn_off: esp_thermostat_humidify
      - lambda: |-
          if (id(esp_thermostat).fan_mode == climate::CLIMATE_FAN_AUTO)
            id(esp_thermostat_fan).turn_off();
      - script.execute: climate_action_refresh
    fan_only_action:
      - switch.turn_on: esp_thermostat_fan
      - script.execute: climate_action_refresh
    fan_mode_auto_action:
      - lambda: |-
          if ((id(esp_thermostat).action != climate::CLIMATE_ACTION_COOLING)
           && (id(esp_thermostat).action != climate::CLIMATE_ACTION_FAN))
            id(esp_thermostat_fan).turn_off();
          esp32_thermostat::display_refresh_fan_mode();
    fan_mode_on_action:
      - switch.turn_on: esp_thermostat_fan
      - lambda: |-
          esp32_thermostat::display_refresh_fan_mode();
    target_temperature_change_action:
      - lambda: |-
          esp32_thermostat::display_refresh_set_points();

binary_sensor:
  - platform: status
    id: esp_thermostat_api_status
    name: API Status
    on_state:
      then:
        - lambda: "esp32_thermostat::display_refresh_status();"
  # - platform: gpio
  #   id: esp_thermostat_tmp117_alert
  #   name: TMP117 Alert
  #   pin:
  #     mcp23017: mcp23017_hub
  #     number: 15
  #     mode: INPUT_PULLUP
  # - platform: gpio
  #   id: esp_thermostat_mcp23017_int_a
  #   name: MCP23017 Interrupt A
  #   pin:
  #     number: GPIO36
  # - platform: gpio
  #   id: esp_thermostat_mcp23017_int_b
  #   name: MCP23017 Interrupt B
  #   pin:
  #     number: GPIO39
  - platform: gpio
    id: esp_thermostat_motion_detection
    name: Motion Detection
    device_class: motion
    pin:
      number: GPIO27
    on_state:
      then:
        - if:
            condition:
              switch.is_on: esp_thermostat_display_on_motion
            then:
              - script.execute: motion_sense
  - platform: gpio
    id: esp_thermostat_mode_button
    name: Mode Button
    pin:
      number: GPIO0
      inverted: true
    on_click:
      min_length: 50ms
      max_length: 500ms
      then:
        - script.execute: motion_sense
        - climate.control:
            id: esp_thermostat
            mode: "off"
            fan_mode: "auto"

sensor:
  - platform: wifi_signal
    name: Wi-Fi Signal
    update_interval: 15s
  # template sensor used for thermostat component
  - platform: template
    id: esp_thermostat_temperature_sensor
    name: Template Temperature Sensor
    unit_of_measurement: "°C"
    # the line below can easily be swapped to use any other sensor
    lambda: "return id(esp_thermostat_bme680_temperature).state;"
    update_interval: 15s
    on_value:
      then:
        - lambda: "id(nextionCurrentTemp).set_state(roundf(esp32_thermostat::c_to_f(id(esp_thermostat_temperature_sensor).state) * 10), false, true);"
  # template sensor used for humidity
  - platform: template
    id: esp_thermostat_humidity_sensor
    name: Template Humidity Sensor
    unit_of_measurement: "%"
    # the line below can easily be swapped to use any other sensor
    lambda: "return id(esp_thermostat_bme680_humidity).state;"
    update_interval: 15s
    on_value:
      then:
        - lambda: |-
            id(nextionCurrentHum).set_state(roundf(id(esp_thermostat_humidity_sensor).state * 10), false, true);
            // switch humidifier on/off as required
            if ((id(esp_thermostat_humidity_sensor).state >= id(esp_thermostat_target_humidity).state + 1) ||
                (id(esp_thermostat).action != CLIMATE_ACTION_HEATING)) {
              id(esp_thermostat_humidify).turn_off();
            } else if (id(esp_thermostat_humidity_sensor).state <= id(esp_thermostat_target_humidity).state - 1) {
              id(esp_thermostat_humidify).turn_on();
            }
  # Nextion climate state (action/mode/fan_mode) sensors
  - platform: nextion
    nextion_id: main_lcd
    id: nextionClimateAction
    variable_name: climateAction
  - platform: nextion
    nextion_id: main_lcd
    id: nextionClimateMode
    variable_name: climateMode
    on_value:
      then:
        - climate.control:
            id: esp_thermostat
            mode: !lambda "return static_cast<climate::ClimateMode>(int(id(nextionClimateMode).state));"
  - platform: nextion
    nextion_id: main_lcd
    id: nextionClimateFanMode
    variable_name: climateFanMode
    on_value:
      then:
        - climate.control:
            id: esp_thermostat
            fan_mode: !lambda "return static_cast<climate::ClimateFanMode>(int(id(nextionClimateFanMode).state));"
  # Other Nextion sensors
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTargetBrightness
    variable_name: targetBrightness
  - platform: nextion
    nextion_id: main_lcd
    id: nextionMaxBrightness
    variable_name: maxBrightness
  - platform: nextion
    nextion_id: main_lcd
    id: nextionMinBrightness
    variable_name: minBrightness
  - platform: nextion
    nextion_id: main_lcd
    id: nextionIdleTimeout
    variable_name: idleTimeout
  - platform: nextion
    nextion_id: main_lcd
    id: nextionIdleTimer
    variable_name: idleTimer
  - platform: nextion
    nextion_id: main_lcd
    id: nextionAutoBrightness
    variable_name: autoBrightness
  - platform: nextion
    nextion_id: main_lcd
    id: nextionAutoHome
    variable_name: autoHome
  - platform: nextion
    nextion_id: main_lcd
    id: nextionCurrentTemp
    variable_name: currentTemp
  - platform: nextion
    nextion_id: main_lcd
    id: nextionCurrentHum
    variable_name: currentHum
  - platform: nextion
    nextion_id: main_lcd
    id: nextionCurrentPres
    variable_name: currentPres
  - platform: nextion
    nextion_id: main_lcd
    id: nextionCurrentSetHum
    variable_name: currentSetHum
  - platform: nextion
    nextion_id: main_lcd
    id: nextionCurrentSetLower
    variable_name: currentSetLower
    on_value:
      then:
        - climate.control:
            id: esp_thermostat
            target_temperature_low: !lambda "return esp32_thermostat::f_to_c(id(nextionCurrentSetLower).state / 10);"
        - lambda: |-
            if (id(nextionCurrentSetLower).state != (esp32_thermostat::c_to_f(id(esp_thermostat).target_temperature_low)) * 10)
              id(nextionCurrentSetLower).set_state(esp32_thermostat::c_to_f(id(esp_thermostat).target_temperature_low) * 10, false, true);
  - platform: nextion
    nextion_id: main_lcd
    id: nextionCurrentSetUpper
    variable_name: currentSetUpper
    on_value:
      then:
        - climate.control:
            id: esp_thermostat
            target_temperature_high: !lambda "return esp32_thermostat::f_to_c(id(nextionCurrentSetUpper).state / 10);"
        - lambda: |-
            if (id(nextionCurrentSetUpper).state != (esp32_thermostat::c_to_f(id(esp_thermostat).target_temperature_high)) * 10)
              id(nextionCurrentSetUpper).set_state(esp32_thermostat::c_to_f(id(esp_thermostat).target_temperature_high) * 10, false, true);
  - platform: nextion
    nextion_id: main_lcd
    id: nextionCurrentSetMin
    variable_name: currentSetMin
  - platform: nextion
    nextion_id: main_lcd
    id: nextionCurrentSetMax
    variable_name: currentSetMax
  - platform: nextion
    nextion_id: main_lcd
    id: nextionWeatherTemp
    variable_name: weatherTemp
  - platform: nextion
    nextion_id: main_lcd
    id: nextionWeatherHum
    variable_name: weatherHum
  - platform: nextion
    nextion_id: main_lcd
    id: nextionWeatherTempHigh
    variable_name: weatherTempHigh
  - platform: nextion
    nextion_id: main_lcd
    id: nextionWeatherTempLow
    variable_name: weatherTempLow
  - platform: nextion
    nextion_id: main_lcd
    id: nextionWeatherCondIcon
    variable_name: weatherCondIcon
  - platform: nextion
    nextion_id: main_lcd
    id: nextionLockoutState
    variable_name: lockoutState
  - platform: nextion
    nextion_id: main_lcd
    id: nextionRoom1Temp
    variable_name: room1Temp
  - platform: nextion
    nextion_id: main_lcd
    id: nextionRoom1Hum
    variable_name: room1Hum
  - platform: nextion
    nextion_id: main_lcd
    id: nextionRoom2Temp
    variable_name: room2Temp
  - platform: nextion
    nextion_id: main_lcd
    id: nextionRoom2Hum
    variable_name: room2Hum
  - platform: nextion
    nextion_id: main_lcd
    id: nextionRoom3Temp
    variable_name: room3Temp
  - platform: nextion
    nextion_id: main_lcd
    id: nextionRoom3Hum
    variable_name: room3Hum
  - platform: nextion
    nextion_id: main_lcd
    id: nextionRoom4Temp
    variable_name: room4Temp
  - platform: nextion
    nextion_id: main_lcd
    id: nextionRoom4Hum
    variable_name: room4Hum
  - platform: nextion
    nextion_id: main_lcd
    id: nextionRoom5Temp
    variable_name: room5Temp
  - platform: nextion
    nextion_id: main_lcd
    id: nextionRoom5Hum
    variable_name: room5Hum
  - platform: nextion
    nextion_id: main_lcd
    id: nextionRoom6Temp
    variable_name: room6Temp
  - platform: nextion
    nextion_id: main_lcd
    id: nextionRoom6Hum
    variable_name: room6Hum
  - platform: nextion
    nextion_id: main_lcd
    id: nextionRoom7Temp
    variable_name: room7Temp
  - platform: nextion
    nextion_id: main_lcd
    id: nextionRoom7Hum
    variable_name: room7Hum
  - platform: nextion
    nextion_id: main_lcd
    id: nextionRoom8Temp
    variable_name: room8Temp
  - platform: nextion
    nextion_id: main_lcd
    id: nextionRoom8Hum
    variable_name: room8Hum
  # HA sensors we track - humidity (UPDATE THESE to match your setup)
  - platform: homeassistant
    id: room_1_humidity_ha
    entity_id: sensor.room_1_humidity
    on_value:
      then:
        - lambda: "id(nextionRoom2Hum).set_state(roundf(x * 10), false, true);"
  - platform: homeassistant
    id: room_2_humidity_ha
    entity_id: sensor.room_2_humidity
    on_value:
      then:
        - lambda: "id(nextionRoom3Hum).set_state(roundf(x * 10), false, true);"
  - platform: homeassistant
    id: room_3_humidity_ha
    entity_id: sensor.room_3_humidity
    on_value:
      then:
        - lambda: "id(nextionRoom4Hum).set_state(roundf(x * 10), false, true);"
  - platform: homeassistant
    id: room_4_humidity_ha
    entity_id: sensor.room_4_humidity
    on_value:
      then:
        - lambda: "id(nextionRoom5Hum).set_state(roundf(x * 10), false, true);"
  # HA sensors we track - temperature (UPDATE THESE to match your setup)
  - platform: homeassistant
    id: room_1_temperature_ha
    entity_id: sensor.room_1_temperature
    on_value:
      then:
        - lambda: "id(nextionRoom2Temp).set_state(roundf(x * 10), false, true);"
  - platform: homeassistant
    id: room_2_temperature_ha
    entity_id: sensor.room_2_temperature
    on_value:
      then:
        - lambda: "id(nextionRoom3Temp).set_state(roundf(x * 10), false, true);"
  - platform: homeassistant
    id: room_3_temperature_ha
    entity_id: sensor.room_3_temperature
    on_value:
      then:
        - lambda: "id(nextionRoom4Temp).set_state(roundf(x * 10), false, true);"
  - platform: homeassistant
    id: room_4_temperature_ha
    entity_id: sensor.room_4_temperature
    on_value:
      then:
        - lambda: "id(nextionRoom5Temp).set_state(roundf(x * 10), false, true);"
  # HA sensors we track - weather (UPDATE THESE to match your setup)
  - platform: homeassistant
    id: weather_air_quality_ha
    entity_id: sensor.waqi_chi_com_illinois_usa
    on_value:
      then:
        - globals.set:
            id: weather_air_quality
            value: !lambda "return x;"
        - lambda: "esp32_thermostat::display_refresh_iaq_txt(x, true);"
  - platform: homeassistant
    id: weather_humidity_ha
    entity_id: sensor.gw2000b_v2_2_4_humidity
    on_value:
      then:
        - globals.set:
            id: weather_humidity
            value: !lambda "return x;"
        - lambda: |-
            id(nextionWeatherHum).set_state(roundf(x * 10), false, true);
            id(nextionRoom7Hum).set_state(roundf(x * 10), false, true);
  - platform: homeassistant
    id: weather_temperature_ha
    entity_id: sensor.gw2000b_v2_2_4_outdoor_temperature
    on_value:
      then:
        - globals.set:
            id: weather_temperature
            value: !lambda "return x;"
        - lambda: |-
            id(nextionWeatherTemp).set_state(roundf(x * 10), false, true);
            id(nextionRoom7Temp).set_state(roundf(x * 10), false, true);
  - platform: homeassistant
    id: weather_forecasted_high_ha
    entity_id: sensor.weather_forecasted_high
    on_value:
      then:
        - globals.set:
            id: weather_temperature_high
            value: !lambda "return x;"
        - lambda: |-
            id(nextionWeatherTempHigh).set_state(roundf(x * 10), false, true);
  - platform: homeassistant
    id: weather_forecasted_low_ha
    entity_id: sensor.weather_forecasted_low
    on_value:
      then:
        - globals.set:
            id: weather_temperature_low
            value: !lambda "return x;"
        - lambda: |-
            id(nextionWeatherTempLow).set_state(roundf(x * 10), false, true);
  # Phototransistor ADC sensor
  - platform: adc
    id: adc_sensor_phototransistor
    name: Phototransistor ADC
    pin: 32
    attenuation: 11db
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 3
          send_first_at: 1
    on_value:
      then:
        - lambda: |-
            if (id(esp_thermostat_display).state) {
              auto brightness_mult_max = 100.0;
              auto brightness_mult_min = 100.0 - id(esp_thermostat_display_brightness_idle_reduction).state;
              auto brightness_max = clamp<float>(roundf(id(adc_sensor_phototransistor).state / 3.9 * brightness_mult_max), id(esp_thermostat_display_minimum_brightness).state, id(esp_thermostat_display_maximum_brightness).state);
              auto brightness_min = clamp<float>(roundf(id(adc_sensor_phototransistor).state / 3.9 * brightness_mult_min), id(esp_thermostat_display_minimum_brightness).state, id(esp_thermostat_display_maximum_brightness).state);
              // ESP_LOGD("display_brightness", "Max: %f - Min: %f", brightness_max, brightness_min);
              id(nextionMaxBrightness).set_state(brightness_max, true, true);
              id(nextionMinBrightness).set_state(brightness_min, true, true);
            } else {
              id(nextionMaxBrightness).set_state(0, true, true);
              id(nextionMinBrightness).set_state(0, true, true);
            }
  # NTC thermistor ADC sensor
  - platform: adc
    id: adc_sensor_thermistor
    name: Thermistor ADC
    pin: 34
    internal: true
    update_interval: 1s
  # NTC thermistor resistance sensor
  - platform: resistance
    id: thermistor_sensor
    name: NTC Thermistor Resistance
    sensor: adc_sensor_thermistor
    configuration: DOWNSTREAM
    reference_voltage: 0.92V
    resistor: 10kOhm
    internal: true
  # NTC thermistor sensor
  - platform: ntc
    id: esp_thermostat_thermistor_temperature
    name: NTC Thermistor Temperature
    sensor: thermistor_sensor
    calibration:
      b_constant: 3380
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    filters:
      - sliding_window_moving_average:
          window_size: 60
          send_every: 15
          send_first_at: 15
    on_value:
      then:
        - lambda: |-
            std::string temperature_string = esp32_thermostat::round_float_to_string(esp32_thermostat::c_to_f(id(esp_thermostat_thermistor_temperature).state)) + "\xB0";
            id(nextionTextSensor6a).set_state(temperature_string, false, true);
  # DHT22 sensor
  - platform: dht
    pin: GPIO23
    model: DHT22
    temperature:
      id: esp_thermostat_dht22_temperature
      name: DHT22 Temperature
      filters:
        - offset: -1.8
      on_value:
        then:
          - lambda: |-
              std::string temperature_string = esp32_thermostat::round_float_to_string(esp32_thermostat::c_to_f(id(esp_thermostat_dht22_temperature).state)) + "\xB0";
              id(nextionTextSensor5a).set_state(temperature_string, false, true);
    humidity:
      id: esp_thermostat_dht22_humidity
      name: DHT22 Humidity
      on_value:
        then:
          - lambda: |-
              std::string humidity_string = esp32_thermostat::round_float_to_string(id(esp_thermostat_dht22_humidity).state) + "%";
              id(nextionTextSensor5b).set_state(humidity_string, false, true);
    update_interval: 15s
  # BME280 sensor
  - platform: bme280
    address: 0x76
    temperature:
      id: esp_thermostat_bme280_temperature
      name: BME280 Temperature
      filters:
        - offset: -1.0
      on_value:
        then:
          - lambda: |-
              std::string temperature_string = esp32_thermostat::round_float_to_string(esp32_thermostat::c_to_f(id(esp_thermostat_bme280_temperature).state)) + "\xB0";
              id(nextionTextSensor2a).set_state(temperature_string, false, true);
    humidity:
      id: esp_thermostat_bme280_humidity
      name: BME280 Humidity
      on_value:
        then:
          - lambda: |-
              std::string humidity_string = esp32_thermostat::round_float_to_string(id(esp_thermostat_bme280_humidity).state) + "%";
              id(nextionTextSensor2b).set_state(humidity_string, false, true);
    pressure:
      id: esp_thermostat_bme280_pressure
      name: BME280 Pressure
      on_value:
        then:
          - lambda: |-
              std::string pressure_string = esp32_thermostat::round_float_to_string(id(esp_thermostat_bme280_pressure).state) + "hPa";
              id(nextionTextSensor2c).set_state(pressure_string, false, true);
    update_interval: 15s
  # BME680 BSEC sensor
  - platform: bme680_bsec
    temperature:
      id: esp_thermostat_bme680_temperature
      name: BME680 Temperature
      filters:
        - offset: -1.8
      on_value:
        then:
          - lambda: |-
              id(nextionRoom1Temp).set_state(roundf((esp32_thermostat::c_to_f(id(esp_thermostat_bme680_temperature).state)) * 10), false, true);
              std::string temperature_string = esp32_thermostat::round_float_to_string(esp32_thermostat::c_to_f(id(esp_thermostat_bme680_temperature).state)) + "\xB0";
              id(nextionTextSensor1a).set_state(temperature_string, false, true);
    humidity:
      id: esp_thermostat_bme680_humidity
      name: BME680 Humidity
      on_value:
        then:
          - lambda: |-
              id(nextionRoom1Hum).set_state(roundf(id(esp_thermostat_bme680_humidity).state * 10), false, true);
              std::string humidity_string = esp32_thermostat::round_float_to_string(id(esp_thermostat_bme680_humidity).state) + "%";
              id(nextionTextSensor1b).set_state(humidity_string, false, true);
    pressure:
      id: esp_thermostat_bme680_pressure
      name: BME680 Pressure
      on_value:
        then:
          - lambda: |-
              id(nextionCurrentPres).set_state(roundf(id(esp_thermostat_bme680_pressure).state * 10), false, true);
              std::string pressure_string = esp32_thermostat::round_float_to_string(id(esp_thermostat_bme680_pressure).state) + "hPa";
              id(nextionTextSensor1c).set_state(pressure_string, false, true);
    gas_resistance:
      id: esp_thermostat_bme680_gas_resistance
      name: BME680 Gas Resistance
      # on_value:
      #   then:
      #     - lambda: |-
      #         std::string gas_res_string = esp32_thermostat::round_float_to_string(id(esp_thermostat_bme680_gas_resistance).state);
      #         id(nextionTextSensor1d).set_state(gas_res_string, false, true);
    iaq:
      id: esp_thermostat_bme680_iaq
      name: BME680 IAQ
      on_value:
        then:
          - lambda: |-
              esp32_thermostat::display_refresh_iaq_txt(id(esp_thermostat_bme680_iaq).state);
              std::string iaq_string = esp32_thermostat::round_float_to_string(id(esp_thermostat_bme680_iaq).state);
              id(nextionTextSensor1d).set_state(iaq_string, false, true);
    co2_equivalent:
      id: esp_thermostat_bme680_eco2
      name: BME680 eCO2
    breath_voc_equivalent:
      id: esp_thermostat_bme680_evoc
      name: BME680 Breath eVOC
  # BME680 sensor
  # - platform: bme680
  #   address: 0x77
  #   temperature:
  #     id: esp_thermostat_bme680_temperature
  #     name: BME680 Temperature
  #     filters:
  #       - offset: -1.2
  #     on_value:
  #       then:
  #         - lambda: |-
  #             std::string temperature_string = esp32_thermostat::round_float_to_string(esp32_thermostat::c_to_f(id(esp_thermostat_bme680_temperature).state)) + "\xB0";
  #             id(nextionTextSensor1a).set_state(temperature_string, false, true);
  #             esp32_thermostat::display_refresh_table_temperature(id(climate_table_local_row), id(esp_thermostat_bme680_temperature).state);
  #   humidity:
  #     id: esp_thermostat_bme680_humidity
  #     name: BME680 Humidity
  #     on_value:
  #       then:
  #         - lambda: |-
  #             std::string humidity_string = esp32_thermostat::round_float_to_string(id(esp_thermostat_bme680_humidity).state) + "%";
  #             id(nextionTextSensor1b).set_state(humidity_string, false, true);
  #             esp32_thermostat::display_refresh_table_humidity(id(climate_table_local_row), id(esp_thermostat_bme680_humidity).state);
  #   pressure:
  #     id: esp_thermostat_bme680_pressure
  #     name: BME680 Pressure
  #     on_value:
  #       then:
  #         - lambda: |-
  #             std::string pressure_string = esp32_thermostat::round_float_to_string(id(esp_thermostat_bme680_pressure).state) + "hPa";
  #             id(nextionTextSensor1c).set_state(pressure_string, false, true);
  #   gas_resistance:
  #     id: esp_thermostat_bme680_gas_resistance
  #     name: BME680 Gas Resistance
  #     on_value:
  #       then:
  #         - lambda: |-
  #             std::string gas_res_string = esp32_thermostat::round_float_to_string(id(esp_thermostat_bme680_gas_resistance).state);
  #             id(nextionTextSensor1d).set_state(gas_res_string, false, true);
  #   update_interval: 15s
  # SHTC3 sensor
  - platform: shtcx
    temperature:
      id: esp_thermostat_shtcx_temperature
      name: SHTC3 Temperature
      filters:
        - offset: -2.0
      on_value:
        then:
          - lambda: |-
              std::string temperature_string = esp32_thermostat::round_float_to_string(esp32_thermostat::c_to_f(id(esp_thermostat_shtcx_temperature).state)) + "\xB0";
              id(nextionTextSensor3a).set_state(temperature_string, false, true);
    humidity:
      id: esp_thermostat_shtcx_humidity
      name: SHTC3 Humidity
      on_value:
        then:
          - lambda: |-
              std::string humidity_string = esp32_thermostat::round_float_to_string(id(esp_thermostat_shtcx_humidity).state) + "%";
              id(nextionTextSensor3b).set_state(humidity_string, false, true);
    update_interval: 15s
  # TMP117 sensor
  - platform: tmp117
    id: esp_thermostat_tmp117_temperature
    name: TMP117 Temperature
    filters:
      - offset: -2.4
    on_value:
      then:
        - lambda: |-
            std::string temperature_string = esp32_thermostat::round_float_to_string(esp32_thermostat::c_to_f(id(esp_thermostat_tmp117_temperature).state)) + "\xB0";
            id(nextionTextSensor4a).set_state(temperature_string, false, true);
    update_interval: 15s
  # SGP40 sensor
  - platform: sgp4x
    voc:
      id: esp_thermostat_sgp40_voc
      name: SGP40 VOC
      unit_of_measurement: VOC Index
      on_value:
        then:
          - lambda: |-
              std::string voc_string = esp32_thermostat::round_float_to_string(id(esp_thermostat_sgp40_voc).state);
              id(nextionTextSensor8d).set_state(voc_string, false, true);
    update_interval: 15s
    compensation:
      humidity_source: esp_thermostat_shtcx_humidity
      temperature_source: esp_thermostat_shtcx_temperature

text_sensor:
  - platform: bme680_bsec
    iaq_accuracy:
      id: esp_thermostat_bme680_accuracy
      name: BME680 Accuracy
  # HA sensors we track - weather condition
  - platform: homeassistant
    id: weather_condition_ha
    entity_id: weather.home_fairfield
    on_value:
      then:
        - globals.set:
            id: weather_condition
            value: !lambda "return x;"
        - lambda: "esp32_thermostat::display_refresh_weather_cond();"
  # Nextion text sensors
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextStatus
    component_name: ${home_page_name}.txtStatus
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextCurrentAq
    component_name: ${home_page_name}.txtCurrentAq
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextWeatherAq
    component_name: ${weather_page_name}.txtWeatherAq
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextWeatherIcon
    component_name: ${weather_page_name}.txtWeatherIcon
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextRoom1
    component_name: ${rooms_page_name}.txtRoom1
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextRoom2
    component_name: ${rooms_page_name}.txtRoom2
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextRoom3
    component_name: ${rooms_page_name}.txtRoom3
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextRoom4
    component_name: ${rooms_page_name}.txtRoom4
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextRoom5
    component_name: ${rooms_page_name}.txtRoom5
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextRoom6
    component_name: ${rooms_page_name}.txtRoom6
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextRoom7
    component_name: ${rooms_page_name}.txtRoom7
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextRoom8
    component_name: ${rooms_page_name}.txtRoom8
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor1
    component_name: ${sensors_page_name}.txtSensor1
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor2
    component_name: ${sensors_page_name}.txtSensor2
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor3
    component_name: ${sensors_page_name}.txtSensor3
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor4
    component_name: ${sensors_page_name}.txtSensor4
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor5
    component_name: ${sensors_page_name}.txtSensor5
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor6
    component_name: ${sensors_page_name}.txtSensor6
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor7
    component_name: ${sensors_page_name}.txtSensor7
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor8
    component_name: ${sensors_page_name}.txtSensor8
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor1a
    component_name: ${sensors_page_name}.txtSensor1a
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor2a
    component_name: ${sensors_page_name}.txtSensor2a
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor3a
    component_name: ${sensors_page_name}.txtSensor3a
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor4a
    component_name: ${sensors_page_name}.txtSensor4a
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor5a
    component_name: ${sensors_page_name}.txtSensor5a
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor6a
    component_name: ${sensors_page_name}.txtSensor6a
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor7a
    component_name: ${sensors_page_name}.txtSensor7a
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor8a
    component_name: ${sensors_page_name}.txtSensor8a
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor1b
    component_name: ${sensors_page_name}.txtSensor1b
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor2b
    component_name: ${sensors_page_name}.txtSensor2b
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor3b
    component_name: ${sensors_page_name}.txtSensor3b
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor4b
    component_name: ${sensors_page_name}.txtSensor4b
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor5b
    component_name: ${sensors_page_name}.txtSensor5b
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor6b
    component_name: ${sensors_page_name}.txtSensor6b
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor7b
    component_name: ${sensors_page_name}.txtSensor7b
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor8b
    component_name: ${sensors_page_name}.txtSensor8b
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor1c
    component_name: ${sensors_page_name}.txtSensor1c
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor2c
    component_name: ${sensors_page_name}.txtSensor2c
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor3c
    component_name: ${sensors_page_name}.txtSensor3c
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor4c
    component_name: ${sensors_page_name}.txtSensor4c
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor5c
    component_name: ${sensors_page_name}.txtSensor5c
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor6c
    component_name: ${sensors_page_name}.txtSensor6c
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor7c
    component_name: ${sensors_page_name}.txtSensor7c
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor8c
    component_name: ${sensors_page_name}.txtSensor8c
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor1d
    component_name: ${sensors_page_name}.txtSensor1d
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor2d
    component_name: ${sensors_page_name}.txtSensor2d
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor3d
    component_name: ${sensors_page_name}.txtSensor3d
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor4d
    component_name: ${sensors_page_name}.txtSensor4d
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor5d
    component_name: ${sensors_page_name}.txtSensor5d
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor6d
    component_name: ${sensors_page_name}.txtSensor6d
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor7d
    component_name: ${sensors_page_name}.txtSensor7d
  - platform: nextion
    nextion_id: main_lcd
    id: nextionTextSensor8d
    component_name: ${sensors_page_name}.txtSensor8d

number:
  - platform: template
    id: esp_thermostat_target_humidity
    name: Target Humidity
    optimistic: true
    mode: box
    min_value: 0
    max_value: 100
    step: 0.1
    initial_value: 30
    restore_value: true
    unit_of_measurement: '%'
    on_value:
      then:
        lambda: "id(nextionCurrentSetHum).set_state(id(esp_thermostat_target_humidity).state * 10, false, true);"
  # display brightness controls
  - platform: template
    id: esp_thermostat_display_brightness
    name: Display Brightness
    mode: box
    min_value: 0
    max_value: 100
    step: 1
    lambda: "return id(nextionTargetBrightness).state;"
    unit_of_measurement: '%'
    update_interval: 1s
    set_action:
      then:
        lambda: |-
          if (id(nextionTargetBrightness).state != x)
            id(nextionTargetBrightness).set_state(x, true, true);
  - platform: template
    id: esp_thermostat_display_minimum_brightness
    name: Display Minimum Brightness
    entity_category: config
    mode: box
    optimistic: true
    unit_of_measurement: '%'
    min_value: 0
    max_value: 99
    step: 1
    initial_value: 6
    restore_value: true
  - platform: template
    id: esp_thermostat_display_maximum_brightness
    name: Display Maximum Brightness
    entity_category: config
    mode: box
    optimistic: true
    unit_of_measurement: '%'
    min_value: 1
    max_value: 100
    step: 1
    initial_value: 100
    restore_value: true
  - platform: template
    id: esp_thermostat_display_brightness_idle_reduction
    name: Display Brightness Idle Reduction
    entity_category: config
    mode: box
    optimistic: true
    unit_of_measurement: '%'
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 80
    restore_value: true
  - platform: template
    id: esp_thermostat_idle_timeout
    name: Idle Timeout
    entity_category: config
    mode: box
    optimistic: true
    unit_of_measurement: s
    min_value: 5
    max_value: 900
    step: 1
    initial_value: 120
    restore_value: true
    on_value:
      then:
        lambda: "id(nextionIdleTimeout).set_state(x * 2, true, true);"

##### thermostat controller config options

switch:
  # display power (hard/physical)
  - platform: gpio
    id: esp_thermostat_display_power
    name: Display Power
    entity_category: config
    restore_mode: ALWAYS_ON
    pin:
      number: 25
      mode: OUTPUT
  # automatic display brightness control
  - platform: template
    id: esp_thermostat_display_auto_brightness
    name: Display Automatic Brightness
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_off:
      then:
        lambda: |-
          id(nextionAutoBrightness).set_state(0, true, true);
    on_turn_on:
      then:
        lambda: |-
          id(nextionAutoBrightness).set_state(1, true, true);
  # display power (soft)
  - platform: template
    id: esp_thermostat_display
    name: Display
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
  # display brightness control by motion
  - platform: template
    id: esp_thermostat_display_on_motion
    name: Display On Motion
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: gpio
    id: esp_thermostat_thermistor_vcc
    name: Thermistor Vcc
    internal: true
    restore_mode: ALWAYS_ON
    pin:
      number: 33
      mode: OUTPUT
  - platform: gpio
    id: esp_thermostat_mcp23017_reset
    name: MCP23017 Reset
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      number: 4
      mode: OUTPUT
      inverted: true
  - platform: gpio
    id: esp_thermostat_fan
    name: Fan
    # internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 0
      mode: OUTPUT
  - platform: gpio
    id: esp_thermostat_cool_1
    name: Cool 1
    # internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 1
      mode: OUTPUT
  - platform: gpio
    id: esp_thermostat_cool_2
    name: Cool 2
    # internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 2
      mode: OUTPUT
  - platform: gpio
    id: esp_thermostat_heat_1
    name: Heat 1
    # internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 3
      mode: OUTPUT
  - platform: gpio
    id: esp_thermostat_heat_2
    name: Heat 2
    # internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 4
      mode: OUTPUT
  - platform: gpio
    id: esp_thermostat_triac_misc_1
    name: Misc 1
    # internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 5
      mode: OUTPUT
  - platform: gpio
    id: esp_thermostat_triac_misc_2
    name: Misc 2
    # internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 6
      mode: OUTPUT
  - platform: gpio
    id: esp_thermostat_triac_misc_3
    name: Misc 3
    # internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 7
      mode: OUTPUT
  - platform: gpio
    id: esp_thermostat_humidify
    name: Humidify
    # internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 8
      mode: OUTPUT
  - platform: gpio
    id: esp_thermostat_relay_2
    name: Relay 2
    # internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 9
      mode: OUTPUT
  - platform: gpio
    id: esp_thermostat_relay_3
    name: Relay 3
    # internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 10
      mode: OUTPUT
  - platform: gpio
    id: esp_thermostat_to_1
    name: Test Output 1
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 11
      mode: OUTPUT
  - platform: gpio
    id: esp_thermostat_to_2
    name: Test Output 2
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 12
      mode: OUTPUT
  - platform: gpio
    id: esp_thermostat_to_3
    name: Test Output 3
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23xxx: mcp23017_hub
      number: 13
      mode: OUTPUT
  # - platform: gpio
  #   id: esp_thermostat_to_4
  #   name: Test Output 4
  #   internal: true
  #   restore_mode: ALWAYS_OFF
  #   pin:
  #     mcp23xxx: mcp23017_hub
  #     number: 14
  #     mode: OUTPUT
  # - platform: gpio
  #   id: esp_thermostat_to_5
  #   name: Test Output 5
  #   internal: true
  #   restore_mode: ALWAYS_OFF
  #   pin:
  #     mcp23xxx: mcp23017_hub
  #     number: 15
  #     mode: OUTPUT

display:
  - platform: nextion
    id: main_lcd
    uart_id: nextion_uart
    update_interval: 15s
    tft_url: http://10.100.0.81/download/public/climate/NX8048P050-011C.tft
    lambda: "esp32_thermostat::draw_main_screen();"
    on_setup:
      then:
        - lambda: |-
            main_lcd->goto_page("weather");
            esp32_thermostat::draw_main_screen(true);
            id(nextionTextRoom1).set_state("Local:", false, true);
            id(nextionTextRoom2).set_state("Room 1:", false, true);
            id(nextionTextRoom3).set_state("Room 2:", false, true);
            id(nextionTextRoom4).set_state("Room 3:", false, true);
            id(nextionTextRoom5).set_state("Room 4:", false, true);

            id(nextionTextSensor1).set_state("BME680:", false, true);
            id(nextionTextSensor2).set_state("BME280:", false, true);
            id(nextionTextSensor3).set_state("SHTC3:", false, true);
            id(nextionTextSensor4).set_state("TMP117:", false, true);
            id(nextionTextSensor5).set_state("DHT22:", false, true);
            id(nextionTextSensor6).set_state("Thermistor 1:", false, true);
            id(nextionTextSensor7).set_state("Thermistor 2:", false, true);
            id(nextionTextSensor8).set_state("SGP40:", false, true);
