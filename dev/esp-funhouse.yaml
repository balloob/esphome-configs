# https://learn.adafruit.com/adafruit-funhouse/pinouts
substitutions:
  node_name: esp-funhouse
  node_friendly_name: "Adafruit Funhouse"

esp32:
  board: featheresp32-s2
  framework:
    type: esp-idf

packages:
  esp_common: !include ../shared/esp__common_core.yaml

# captive_portal:

# Enable logging
logger:

time:
  - platform: homeassistant
    id: esptime
    timezone: CST+6CDT,M3.2.0/2,M11.1.0/2

i2c:
  id: i2c_bus
  frequency: 400kHz
  scl: 33
  sda: 34
  scan: false

spi:
  clk_pin: GPIO36
  mosi_pin: GPIO35

status_led:
  pin:
    number: GPIO37

globals:
  - id: coord_x0
    type: float
    initial_value: '0'
  - id: coord_y0
    type: float
    initial_value: '0'
  - id: coord_x1
    type: float
    initial_value: '240'
  - id: coord_y1
    type: float
    initial_value: '240'

font:
  - file: "../resources/Helvetica.ttf"
    id: helvetica_large
    size: 48
  - file: "../resources/Helvetica.ttf"
    id: helvetica_med
    size: 20
  - file: "../resources/Helvetica.ttf"
    id: helvetica_small
    size: 12

binary_sensor:
  - platform: status
    name: "ST7789V Status"
    id: st7789v_status
  - platform: gpio
    id: button_input_0
    name: "Button Up"
    pin:
      number: GPIO5
    on_press:
      - display.page.show: page1
      - component.update: main_lcd
  - platform: gpio
    id: button_input_1
    name: "Button Select"
    pin:
      number: GPIO4
    on_press:
      - display.page.show: page2
      - component.update: main_lcd
  - platform: gpio
    id: button_input_2
    name: "Button Down"
    pin:
      number: GPIO3
    on_press:
      - display.page.show: page3
      - component.update: main_lcd
  - platform: gpio
    id: motion_sense
    name: Motion Detection
    pin:
      number: GPIO16

color:
  - id: kbx_red
    red: 100%
    green: 0%
    blue: 0%
  - id: kbx_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: kbx_green
    red: 0%
    green: 100%
    blue: 0%
  - id: kbx_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: kbx_gray
    red: 50%
    green: 50%
    blue: 50%

output:
  - platform: ledc
    id: backlight_pwm
    pin: GPIO21

light:
  - platform: monochromatic
    id: backlight
    name: "Backlight"
    output: backlight_pwm
    restore_mode: ALWAYS_ON
#   - platform: fastled_spi
#     name: "APA102"
#     chipset: DOTSTAR
#     data_pin: GPIO14
#     clock_pin: GPIO15
#     num_leds: 5
#     rgb_order: BRG

number:
  - platform: template
    id: num_x0
    name: ST7789 Test X0 Coordinate
    min_value: 0
    max_value: 1000
    step: 1
    lambda: 'return id(coord_x0);'
    set_action:
      then:
        - globals.set:
            id: coord_x0
            value: !lambda 'return x;'
        # - component.update: main_lcd
  - platform: template
    id: num_y0
    name: ST7789 Test Y0 Coordinate
    min_value: 0
    max_value: 1000
    step: 1
    lambda: 'return id(coord_y0);'
    set_action:
      then:
        - globals.set:
            id: coord_y0
            value: !lambda 'return x;'
        # - component.update: main_lcd
  - platform: template
    id: num_x1
    name: ST7789 Test X1 Coordinate
    min_value: 0
    max_value: 1000
    step: 1
    lambda: 'return id(coord_x1);'
    set_action:
      then:
        - globals.set:
            id: coord_x1
            value: !lambda 'return x;'
        # - component.update: main_lcd
  - platform: template
    id: num_y1
    name: ST7789 Test Y1 Coordinate
    min_value: 0
    max_value: 1000
    step: 1
    lambda: 'return id(coord_y1);'
    set_action:
      then:
        - globals.set:
            id: coord_y1
            value: !lambda 'return x;'
        # - component.update: main_lcd
  - platform: template
    id: num_main_lcd_page
    name: ST7789 Display Page
    optimistic: true
    min_value: 0
    max_value: 2
    step: 1
    initial_value: 0
    on_value:
      then:
        - display.page.show: !lambda |-
            if (x == 1) {
              return id(page2);
            } else if (x == 2) {
              return id(page3);
            } else {
              return id(page1);
            }

display:
  - platform: st7789v
    id: main_lcd
    model: Adafruit Funhouse 240x240
    rotation: 180
    eightbitcolor: true
    cs_pin: GPIO40
    dc_pin: GPIO39
    reset_pin: GPIO41
    update_interval: 10 seconds
    pages:
      - id: page1
        lambda: |-
          // id(test_gpio_pin).turn_on();

          it.rectangle(0,  0, it.get_width(), it.get_height(), id(kbx_blue));
          it.rectangle(0, 20, it.get_width(), it.get_height(), id(kbx_blue));   // header bar

          it.print(5, 5, id(helvetica_small), id(kbx_yellow), TextAlign::TOP_LEFT, "ESPHome");
          
          if (id(st7789v_status).state) {
            it.print(235, 5, id(helvetica_small), id(kbx_green), TextAlign::TOP_RIGHT, "Online");
          }
          else {
            it.print(235, 5, id(helvetica_small), id(kbx_red), TextAlign::TOP_RIGHT, "Offline");
          }

          // it.image(0, 0, id(my_image));

          it.strftime((240 / 2), 5, id(helvetica_small), id(kbx_gray), TextAlign::TOP_CENTER, "%Y-%m-%d", id(esptime).now());
          it.strftime((240 / 2), 25, id(helvetica_small), id(kbx_gray), TextAlign::TOP_CENTER, "%H:%M:%S", id(esptime).now());

      - id: page2
        lambda: |-
          // id(test_gpio_pin).turn_on();

          it.rectangle(0,  0, it.get_width(), it.get_height(), id(kbx_red));
          it.rectangle(0, 20, it.get_width(), it.get_height(), id(kbx_red));   // header bar

          it.print(5, 5, id(helvetica_small), id(kbx_yellow), TextAlign::TOP_LEFT, "ESPHome");
          
          if (id(st7789v_status).state) {
            it.print(235, 5, id(helvetica_small), id(kbx_green), TextAlign::TOP_RIGHT, "Online");
          }
          else {
            it.print(235, 5, id(helvetica_small), id(kbx_red), TextAlign::TOP_RIGHT, "Offline");
          }

          // it.image(20, 0, id(my_image));

          it.strftime((240 / 2), 5, id(helvetica_small), id(kbx_gray), TextAlign::TOP_CENTER, "%Y-%m-%d", id(esptime).now());
          it.strftime((240 / 2), 25, id(helvetica_small), id(kbx_gray), TextAlign::TOP_CENTER, "%H:%M:%S", id(esptime).now());

      - id: page3
        lambda: |-
          it.rectangle((it.get_width() / 2) - 1, (it.get_height()) / 2 - 1, 3, 3, id(kbx_blue));
          it.rectangle(id(coord_x0), id(coord_y0), id(coord_x1), id(coord_y1), id(kbx_green));