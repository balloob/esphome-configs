# https://learn.adafruit.com/adafruit-funhouse/pinouts
substitutions:
  node_name: esp-funhouse
  node_friendly_name: "Adafruit Funhouse"

esphome:
  platformio_options:
    build_flags:
      - -DBOARD_HAS_PSRAM

esp32:
  board: featheresp32-s2
  framework:
    type: esp-idf

packages:
  esp_common: !include ../shared/esp__common_core.yaml

# captive_portal:

# Enable logging
logger:

time:
  - platform: homeassistant
    id: esptime
    timezone: CST+6CDT,M3.2.0/2,M11.1.0/2

i2c:
  id: i2c_bus
  frequency: 400kHz
  scl: 33
  sda: 34
  scan: false

spi:
  clk_pin: GPIO36
  mosi_pin: GPIO35

status_led:
  pin:
    number: GPIO37

font:
  - file: "../resources/Helvetica.ttf"
    id: helvetica_xlarge
    size: 64
  - file: "../resources/Helvetica.ttf"
    id: helvetica_large
    size: 48
  - file: "../resources/Helvetica.ttf"
    id: helvetica_med
    size: 28
  - file: "../resources/Helvetica.ttf"
    id: helvetica_small
    size: 12

binary_sensor:
  - platform: status
    name: ${node_friendly_name} Status
    id: funhouse_status
  - platform: gpio
    id: button_input_0
    name: ${node_friendly_name} Button Up
    pin:
      number: GPIO5
    # on_press:
    #   - display.page.show: page1
    #   - component.update: main_lcd
  - platform: gpio
    id: button_input_1
    name: ${node_friendly_name} Button Select
    pin:
      number: GPIO4
    # on_press:
    #   - display.page.show: page2
    #   - component.update: main_lcd
  - platform: gpio
    id: button_input_2
    name: ${node_friendly_name} Button Down
    pin:
      number: GPIO3
    # on_press:
    #   - display.page.show: page3
    #   - component.update: main_lcd
  - platform: gpio
    id: motion_sense
    name: ${node_friendly_name} Motion Detection
    pin:
      number: GPIO16

color:
  - id: kbx_red
    red: 100%
    green: 0%
    blue: 0%
  - id: kbx_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: kbx_green
    red: 0%
    green: 100%
    blue: 0%
  - id: kbx_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: kbx_gray
    red: 50%
    green: 50%
    blue: 50%
  - id: kbx_white
    red: 90%
    green: 90%
    blue: 90%

output:
  - platform: ledc
    id: backlight_pwm
    pin: GPIO21

light:
  - platform: monochromatic
    id: backlight
    name: ${node_friendly_name} Backlight
    output: backlight_pwm
    restore_mode: ALWAYS_ON
#   - platform: fastled_spi
#     name: ${node_friendly_name} APA102
#     chipset: DOTSTAR
#     data_pin: GPIO14
#     clock_pin: GPIO15
#     num_leds: 5
#     rgb_order: BRG

sensor:
  # Phototransistor ADC sensor
  # - platform: adc
  #   id: esp_sprinkler_controller_adc_sensor_phototransistor
  #   name: ${node_friendly_name} Phototransistor ADC
  #   pin: 18
  #   attenuation: 11db
  #   update_interval: 1s
  - platform: aht10
    temperature:
      id: funhouse_aht20_temperature
      name: ${node_friendly_name} AHT20 Temperature
      filters:
        - offset: -2.0
    humidity:
      id: funhouse_aht20_humidity
      name: ${node_friendly_name} AHT20 Humidity
    update_interval: 15s
  - platform: dps310
    temperature:
      id: funhouse_dps310_temperature
      name: ${node_friendly_name} DPS310 Temperature
      filters:
        - offset: -2.0
    pressure:
      id: funhouse_dps310_pressure
      name: ${node_friendly_name} DPS310 Pressure
    update_interval: 15s

display:
  - platform: st7789v
    id: main_lcd
    model: Adafruit Funhouse 240x240
    rotation: 180
    eightbitcolor: true
    cs_pin: GPIO40
    dc_pin: GPIO39
    reset_pin: GPIO41
    update_interval: 15 seconds
    pages:
      - id: page1
        lambda: |-
          // id(test_gpio_pin).turn_on();

          it.rectangle(0,  0, it.get_width(), it.get_height(), id(kbx_blue));
          it.rectangle(0, 20, it.get_width(), it.get_height(), id(kbx_blue));   // header bar

          it.print(5, 5, id(helvetica_small), id(kbx_yellow), TextAlign::TOP_LEFT, "ESPHome");

          if (id(funhouse_status).state) {
            it.print(235, 5, id(helvetica_small), id(kbx_green), TextAlign::TOP_RIGHT, "Online");
          }
          else {
            it.print(235, 5, id(helvetica_small), id(kbx_red), TextAlign::TOP_RIGHT, "Offline");
          }

          // it.image(0, 0, id(my_image));

          it.strftime((it.get_width() / 2), 5, id(helvetica_small), id(kbx_gray), TextAlign::TOP_CENTER, "%Y-%m-%d", id(esptime).now());
          it.strftime((it.get_width() / 2), 25, id(helvetica_small), id(kbx_gray), TextAlign::TOP_CENTER, "%H:%M", id(esptime).now());

          it.printf(it.get_width() / 2, it.get_height() / 2 - 40, id(helvetica_xlarge), id(kbx_white), TextAlign::TOP_CENTER, "%.1fÂ°", id(funhouse_aht20_temperature).state * 1.8 + 32);
          it.printf(it.get_width() / 2, it.get_height() / 2 + 40, id(helvetica_med), id(kbx_gray), TextAlign::TOP_CENTER, "%.1f%%", id(funhouse_aht20_humidity).state);
