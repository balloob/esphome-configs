substitutions:
  node_name: esp-sprinkler-controller
  node_friendly_name: "Sprinkler Controller"

packages:
  esp_common: !include ../shared/esp__common_core.yaml

esphome:
  platform: ESP32
  board: featheresp32
  includes: shared/esp_sprinkler.h
  on_boot:
  #   priority: 500
    then:
      - script.execute: display_on

# Enable Home Assistant API and define services
api:
  services:
    - service: set_display_page
      variables:
        page: int
      then:
        - lambda: 'esp_sprinkler::set_display_page(page);'
    - service: set_start_time
      variables:
        hour: int
        minute: int
      then:
        - globals.set:
            id: start_hour
            value: !lambda 'return hour;'
        - globals.set:
            id: start_minute
            value: !lambda 'return minute;'
        - lambda: 'esp_sprinkler::validate_start_time();'
    - service: set_run_times
      variables:
        zone_1: int
        zone_2: int
        zone_3: int
        zone_4: int
        zone_5: int
      then:
        - globals.set:
            id: zone_1_run_time
            value: !lambda 'return zone_1;'
        - globals.set:
            id: zone_2_run_time
            value: !lambda 'return zone_2;'
        - globals.set:
            id: zone_3_run_time
            value: !lambda 'return zone_3;'
        - globals.set:
            id: zone_4_run_time
            value: !lambda 'return zone_4;'
        - globals.set:
            id: zone_5_run_time
            value: !lambda 'return zone_5;'
    - service: set_run_time_multiplier
      variables:
        multiplier: float
      then:
        - globals.set:
            id: zone_run_time_multiplier
            value: !lambda 'return multiplier;'
        - lambda: 'esp_sprinkler::validate_multiplier();'

globals:
  # zone run times (in minutes)
  - id: zone_1_run_time
    type: int
    restore_value: yes
    initial_value: '10'
  - id: zone_2_run_time
    type: int
    restore_value: yes
    initial_value: '30'
  - id: zone_3_run_time
    type: int
    restore_value: yes
    initial_value: '5'
  - id: zone_4_run_time
    type: int
    restore_value: yes
    initial_value: '25'
  - id: zone_5_run_time
    type: int
    restore_value: yes
    initial_value: '15'
  # zone run time multiplier
  - id: zone_run_time_multiplier
    type: float
    restore_value: yes
    initial_value: '1'
  # start time
  - id: start_hour
    type: int
    restore_value: yes
    initial_value: '5'
  - id: start_minute
    type: int
    restore_value: yes
    initial_value: '0'
  # currently active zone
  - id: active_zone
    type: int
    restore_value: no
    initial_value: '-1'
  # currently active zone time remaining
  - id: seconds_remaining
    type: int
    restore_value: no
    initial_value: '-1'
  # selected display pages/items
  - id: selected_display_page
    type: int
    restore_value: no
    initial_value: '0'
  - id: selected_display_item
    type: int
    restore_value: no
    initial_value: '0'
  # last processed encoder value
  - id: encoder_value
    type: int
    restore_value: no
    initial_value: '0'

script:
  # display screen management
  - id: button_press
    mode: restart
    then:
      - script.execute: display_on
      - delay: 60s
      - lambda: 'esp_sprinkler::set_display_page(esp_sprinkler::DisplayPageEnum::MAIN_SCREEN);'
  # display power management
  - id: display_on
    mode: restart
    then:
      - lambda: 'id(main_lcd)->turn_on();'
      - delay: 120s
      - lambda: 'id(main_lcd)->turn_off();'
# creates the door opener button pulse
  - id: pulse_door_opener_relay
    mode: restart
    then:
      - switch.turn_on: esp_sprinkler_controller_relay_1
      - delay: 1s
      - switch.turn_off: esp_sprinkler_controller_relay_1
# display screen management
  - id: zone_switch_delay
    mode: restart
    then:
      - delay: 5s
  # switches all zones off
  - id: all_zones_off
    mode: restart
    then:
      - switch.turn_off: esp_sprinkler_controller_triac_zone_1
      - switch.turn_off: esp_sprinkler_controller_triac_zone_2
      - switch.turn_off: esp_sprinkler_controller_triac_zone_3
      - switch.turn_off: esp_sprinkler_controller_triac_zone_4
      - switch.turn_off: esp_sprinkler_controller_triac_zone_5
      - switch.turn_off: esp_sprinkler_controller_triac_zone_6
      - switch.turn_off: esp_sprinkler_controller_triac_zone_7
      - script.execute: zone_switch_delay

interval:
  - interval: 1s
    then:
      - lambda: 'esp_sprinkler::periodic_refresh();'
      
status_led:
  pin:
    number: GPIO5
    inverted: true

time:
  - platform: homeassistant
    id: esptime

i2c:
  id: i2c_bus
  frequency: 400kHz
  sda: 21
  scl: 22

mcp23017:
  - id: mcp23017_hub
    address: 0x20

spi:
  clk_pin: GPIO14
  mosi_pin: GPIO13
  miso_pin: GPIO12

binary_sensor:
  - platform: status
    id: esp_sprinkler_controller_api_status
    name: ${node_friendly_name} API Status
  # - platform: gpio
  #   id: esp_sprinkler_controller_sd_cd
  #   name: ${node_friendly_name} SD CD
  #   pin:
  #     mcp23017: mcp23017_hub
  #     number: 14
  #     mode: INPUT_PULLUP
  # - platform: gpio
  #   id: esp_sprinkler_controller_tmp117_alert
  #   name: ${node_friendly_name} TMP117 Alert
  #   pin:
  #     mcp23017: mcp23017_hub
  #     number: 15
  #     mode: INPUT_PULLUP
  # - platform: gpio
  #   id: esp_sprinkler_controller_mcp23017_int_a
  #   name: ${node_friendly_name} MCP23017 Interrupt A
  #   pin:
  #     number: GPIO36
  # - platform: gpio
  #   id: esp_sprinkler_controller_mcp23017_int_b
  #   name: ${node_friendly_name} MCP23017 Interrupt B
  #   pin:
  #     number: GPIO39
  - platform: gpio
    id: esp_sprinkler_controller_motion_detection
    name: ${node_friendly_name} Motion Detection
    pin:
      number: GPIO27
    on_state:
      then:
        - if:
            condition:
              switch.is_on: esp_sprinkler_controller_display_on_motion
            then:
              - script.execute: display_on
  - platform: gpio
    id: esp_sprinkler_controller_door_sensor
    name: ${node_friendly_name} Door Sensor
    pin:
      mcp23017: mcp23017_hub
      number: 13
      mode: INPUT_PULLUP
  - platform: gpio
    id: esp_sprinkler_controller_mode_button
    name: ${node_friendly_name} Mode Button
    pin:
      number: GPIO0
      inverted: true
    on_click:
      min_length: 50ms
      max_length: 500ms
      then:
        - lambda: 'esp_sprinkler::mode_button_click();'
        - component.update: main_lcd
        - script.execute: button_press
  - platform: gpio
    id: esp_sprinkler_controller_encoder_button
    name: ${node_friendly_name} Encoder Button
    pin:
      number: GPIO2
      inverted: true
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then:
          - lambda: 'esp_sprinkler::encoder_button_click();'
          - component.update: main_lcd
          - script.execute: button_press
      - min_length: 1s
        max_length: 2s
        then:
          - script.execute: pulse_door_opener_relay

sensor:
  # Phototransistor ADC sensor
  - platform: adc
    id: adc_sensor_phototransistor
    name: ${node_friendly_name} Phototransistor ADC
    pin: 32
    attenuation: 11db
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 3
          send_first_at: 1
    on_value:
      then:
        - lambda: |-
            const float display_brightness = id(adc_sensor_phototransistor).state / 3.9;
            id(main_lcd)->set_brightness(display_brightness);
  # NTC thermistor ADC sensor
  - platform: adc
    id: adc_sensor_thermistor
    name: ${node_friendly_name} Thermistor ADC
    pin: 34
    internal: true
    update_interval: 15s
  # NTC thermistor resistance sensor
  - platform: resistance
    id: thermistor_sensor
    name: ${node_friendly_name} NTC Thermistor Resistance
    sensor: adc_sensor_thermistor
    configuration: DOWNSTREAM
    reference_voltage: 0.85V
    resistor: 10kOhm
    internal: true
  # NTC thermistor sensor
  - platform: ntc
    id: esp_sprinkler_controller_thermistor_temperature
    name: ${node_friendly_name} NTC Thermistor Temperature
    sensor: thermistor_sensor
    calibration:
      b_constant: 3380
      reference_temperature: 25Â°C
      reference_resistance: 10kOhm
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 1
          send_first_at: 1
  # DHT22 sensor
  - platform: dht
    pin: GPIO23
    model: DHT22
    temperature:
      id: esp_sprinkler_controller_dht22_temperature
      name: ${node_friendly_name} DHT22 Temperature
      filters:
        - offset: -1.2
    humidity:
      id: esp_sprinkler_controller_dht22_humidity
      name: ${node_friendly_name} DHT22 Humidity
    update_interval: 15s
  # BME280 sensor
  - platform: bme280
    address: 0x76
    temperature:
      id: esp_sprinkler_controller_bme280_temperature
      name: ${node_friendly_name} BME280 Temperature
      filters:
        - offset: -0.5
    humidity:
      id: esp_sprinkler_controller_bme280_humidity
      name: ${node_friendly_name} BME280 Humidity
    pressure:
      id: esp_sprinkler_controller_bme280_pressure
      name: ${node_friendly_name} BME280 Pressure
    update_interval: 15s
  # SHTC3 sensor
  - platform: shtcx
    temperature:
      id: esp_sprinkler_controller_shtcx_temperature
      name: ${node_friendly_name} SHTC3 Temperature
      filters:
        - offset: -1
    humidity:
      id: esp_sprinkler_controller_shtcx_humidity
      name: ${node_friendly_name} SHTC3 Humidity
    update_interval: 15s
  # TMP117 sensor
  - platform: tmp117
    id: esp_sprinkler_controller_tmp117_temperature
    name: ${node_friendly_name} TMP117 Temperature
    filters:
      - offset: -1.25
    update_interval: 15s
  # Encoder sensor
  - platform: rotary_encoder
    id: esp_sprinkler_controller_encoder
    name: ${node_friendly_name} Encoder
    pin_a: GPIO18
    pin_b: GPIO19
    on_value:
      then:
        - lambda: 'esp_sprinkler::encoder_value_change();'
        - component.update: main_lcd
        - script.execute: button_press

switch:
  # display control
  - platform: template
    id: esp_sprinkler_controller_display
    name: ${node_friendly_name} Display
    turn_on_action:
      - script.execute: display_on
    turn_off_action:
      - lambda: 'id(main_lcd)->turn_off();'
    lambda: 'return id(main_lcd)->is_on();'
  # display control by motion
  - platform: template
    id: esp_sprinkler_controller_display_on_motion
    name: ${node_friendly_name} Display On Motion
    optimistic: true
    restore_state: true
  # garage door opener "button"
  - platform: template
    id: esp_sprinkler_controller_opener_button
    name: ${node_friendly_name} Door Opener Button
    turn_on_action:
      - script.execute: pulse_door_opener_relay
    lambda: 'return id(esp_sprinkler_controller_relay_1).state;'
  # zone auto-advance -- enables automatic advancing to the next zone until all zone enablers are "off"
  - platform: template
    id: esp_sprinkler_controller_auto_advance
    name: ${node_friendly_name} Auto-Advance
    optimistic: true
    restore_state: true
  - platform: template
    id: esp_sprinkler_controller_scheduled_start
    name: ${node_friendly_name} Scheduled Start
    optimistic: true
    restore_state: true
  # zone enablers -- 'on' means a zone will run in the cycle, 'off' means it will not
  - platform: template
    id: esp_sprinkler_controller_zone_1_enable
    name: ${node_friendly_name} Zone 1 Enable
    optimistic: true
  - platform: template
    id: esp_sprinkler_controller_zone_2_enable
    name: ${node_friendly_name} Zone 2 Enable
    optimistic: true
  - platform: template
    id: esp_sprinkler_controller_zone_3_enable
    name: ${node_friendly_name} Zone 3 Enable
    optimistic: true
  - platform: template
    id: esp_sprinkler_controller_zone_4_enable
    name: ${node_friendly_name} Zone 4 Enable
    optimistic: true
  - platform: template
    id: esp_sprinkler_controller_zone_5_enable
    name: ${node_friendly_name} Zone 5 Enable
    optimistic: true
  # patch template switches to phyical switches so control is consistent
  - platform: template
    id: esp_sprinkler_controller_zone_1
    name: ${node_friendly_name} Zone 1
    turn_on_action:
      - lambda: 'esp_sprinkler::start_zone(0);'
      - script.wait: zone_switch_delay
      - script.execute: all_zones_off
      - script.wait: zone_switch_delay
      - lambda: 'esp_sprinkler::activate_zone();'
    turn_off_action:
      - script.execute: all_zones_off
      - lambda: 'esp_sprinkler::stop_zone(0);'
    lambda: 'return id(esp_sprinkler_controller_triac_zone_1).state;'
  - platform: template
    id: esp_sprinkler_controller_zone_2
    name: ${node_friendly_name} Zone 2
    turn_on_action:
      - lambda: 'esp_sprinkler::start_zone(1);'
      - script.wait: zone_switch_delay
      - script.execute: all_zones_off
      - script.wait: zone_switch_delay
      - lambda: 'esp_sprinkler::activate_zone();'
    turn_off_action:
      - script.execute: all_zones_off
      - lambda: 'esp_sprinkler::stop_zone(1);'
    lambda: 'return id(esp_sprinkler_controller_triac_zone_2).state;'
  - platform: template
    id: esp_sprinkler_controller_zone_3
    name: ${node_friendly_name} Zone 3
    turn_on_action:
      - lambda: 'esp_sprinkler::start_zone(2);'
      - script.wait: zone_switch_delay
      - script.execute: all_zones_off
      - script.wait: zone_switch_delay
      - lambda: 'esp_sprinkler::activate_zone();'
    turn_off_action:
      - script.execute: all_zones_off
      - lambda: 'esp_sprinkler::stop_zone(2);'
    lambda: 'return id(esp_sprinkler_controller_triac_zone_3).state;'
  - platform: template
    id: esp_sprinkler_controller_zone_4
    name: ${node_friendly_name} Zone 4
    turn_on_action:
      - lambda: 'esp_sprinkler::start_zone(3);'
      - script.wait: zone_switch_delay
      - script.execute: all_zones_off
      - script.wait: zone_switch_delay
      - lambda: 'esp_sprinkler::activate_zone();'
    turn_off_action:
      - script.execute: all_zones_off
      - lambda: 'esp_sprinkler::stop_zone(3);'
    lambda: 'return id(esp_sprinkler_controller_triac_zone_4).state;'
  - platform: template
    id: esp_sprinkler_controller_zone_5
    name: ${node_friendly_name} Zone 5
    turn_on_action:
      - lambda: 'esp_sprinkler::start_zone(4);'
      - script.wait: zone_switch_delay
      - script.execute: all_zones_off
      - script.wait: zone_switch_delay
      - lambda: 'esp_sprinkler::activate_zone();'
    turn_off_action:
      - script.execute: all_zones_off
      - lambda: 'esp_sprinkler::stop_zone(4);'
    lambda: 'return id(esp_sprinkler_controller_triac_zone_5).state;'
  - platform: template
    id: esp_sprinkler_controller_master
    name: ${node_friendly_name} Master Valve
    turn_on_action:
      - lambda: 'esp_sprinkler::start_master();'
      # - script.wait: zone_switch_delay
      - switch.turn_on: esp_sprinkler_controller_triac_master
    turn_off_action:
      - lambda: 'esp_sprinkler::stop_master();'
      - script.wait: zone_switch_delay
      - switch.turn_off: esp_sprinkler_controller_triac_master
      - script.execute: all_zones_off
    lambda: 'return id(esp_sprinkler_controller_triac_master).state;'
  # physical switches
  - platform: gpio
    id: esp_sprinkler_controller_dht22_vcc
    name: ${node_friendly_name} DHT22 Vcc
    internal: true
    restore_mode: ALWAYS_ON
    pin:
      number: 25
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_thermistor_vcc
    name: ${node_friendly_name} Thermistor Vcc
    internal: true
    restore_mode: ALWAYS_ON
    pin:
      number: 33
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_mcp23017_reset
    name: ${node_friendly_name} MCP23017 Reset
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      number: 4
      mode: OUTPUT
      inverted: true
  - platform: gpio
    id: esp_sprinkler_controller_triac_zone_1
    name: ${node_friendly_name} TRIAC Zone 1
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23017: mcp23017_hub
      number: 0
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_triac_zone_2
    name: ${node_friendly_name} TRIAC Zone 2
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23017: mcp23017_hub
      number: 1
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_triac_zone_3
    name: ${node_friendly_name} TRIAC Zone 3
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23017: mcp23017_hub
      number: 2
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_triac_zone_4
    name: ${node_friendly_name} TRIAC Zone 4
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23017: mcp23017_hub
      number: 3
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_triac_zone_5
    name: ${node_friendly_name} TRIAC Zone 5
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23017: mcp23017_hub
      number: 4
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_triac_zone_6
    name: ${node_friendly_name} TRIAC Zone 6
    restore_mode: ALWAYS_OFF
    internal: true
    pin:
      mcp23017: mcp23017_hub
      number: 5
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_triac_zone_7
    name: ${node_friendly_name} TRIAC Zone 7
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23017: mcp23017_hub
      number: 6
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_triac_master
    name: ${node_friendly_name} TRIAC Master Valve
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      mcp23017: mcp23017_hub
      number: 7
      mode: OUTPUT
  - platform: gpio
    id: esp_sprinkler_controller_relay_1
    name: ${node_friendly_name} Relay 1
    internal: true
    pin:
      mcp23017: mcp23017_hub
      number: 8
      mode: OUTPUT
  # - platform: gpio
  #   id: esp_sprinkler_controller_relay_2
  #   name: ${node_friendly_name} Relay 2
  #   internal: true
  #   pin:
  #     mcp23017: mcp23017_hub
  #     number: 9
  #     mode: OUTPUT
  # - platform: gpio
  #   id: esp_sprinkler_controller_relay_3
  #   name: ${node_friendly_name} Relay 3
  #   internal: true
  #   pin:
  #     mcp23017: mcp23017_hub
  #     number: 10
  #     mode: OUTPUT
  # - platform: gpio
  #   id: esp_sprinkler_controller_to_1
  #   name: ${node_friendly_name} Test Output 1
  #   internal: true
  #   pin:
  #     mcp23017: mcp23017_hub
  #     number: 11
  #     mode: OUTPUT
  # - platform: gpio
  #   id: esp_sprinkler_controller_to_2
  #   name: ${node_friendly_name} Test Output 2
  #   internal: true
  #   pin:
  #     mcp23017: mcp23017_hub
  #     number: 12
  #     mode: OUTPUT
  # - platform: gpio
  #   id: esp_sprinkler_controller_to_3
  #   name: ${node_friendly_name} Test Output 3
  #   internal: true
  #   pin:
  #     mcp23017: mcp23017_hub
  #     number: 13
  #     mode: OUTPUT
  # - platform: gpio
  #   id: esp_sprinkler_controller_to_4
  #   name: ${node_friendly_name} Test Output 4
  #   internal: true
  #   pin:
  #     mcp23017: mcp23017_hub
  #     number: 14
  #     mode: OUTPUT
  # - platform: gpio
  #   id: esp_sprinkler_controller_to_5
  #   name: ${node_friendly_name} Test Output 5
  #   internal: true
  #   pin:
  #     mcp23017: mcp23017_hub
  #     number: 15
  #     mode: OUTPUT

# try OpenSansCondensed-Light.ttf
font:
  - file: resources/Helvetica.ttf
    id: controller_large
    size: 24
  - file: resources/Helvetica.ttf
    id: controller_medium
    size: 18
  - file: resources/Helvetica.ttf
    id: controller_small
    size: 11
    glyphs: '!"%()<>+,-_.:Â°/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'
  - file: resources/Helvetica.ttf
    id: controller_tiny
    size: 9

color:
  - id: color_mode
    white: 50%
  - id: color_action
    white: 100%
  - id: color_footer
    white: 20%
  - id: color_time
    white: 8%
  - id: color_highlight
    white: 90%
  - id: color_lowlight
    white: 8%

display:
  - platform: ssd1325_spi
    id: main_lcd
    model: "SSD1325 128x64"
    cs_pin: GPIO15
    dc_pin: GPIO16
    reset_pin: GPIO17
    pages:
      - id: main_screen
        lambda: 'esp_sprinkler::draw_main_screen(&it);'
      - id: setup_screen
        lambda: 'esp_sprinkler::draw_setup_screen(&it);'
